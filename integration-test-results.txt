ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: 👥 sync secrets across teammates & machines: https://dotenvx.com/ops

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: ✅ audit secrets and track compliance: https://dotenvx.com/ops

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: ⚙️  override existing env vars with { override: true }

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: ⚙️  write to custom object with { processEnv: myObject }

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: ⚙️  load multiple .env files with { path: ['.env.local', '.env'] }

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [dotenv@17.2.3] injecting env (0) from .env -- tip: ⚙️  write to custom object with { processEnv: myObject }

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: 👥 sync secrets across teammates & machines: https://dotenvx.com/ops

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [PlannerAgent] Planning for query: Get shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: 👥 sync secrets across teammates & machines: https://dotenvx.com/ops

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [dotenv@17.2.3] injecting env (49) from .env -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

      at _log (node_modules/dotenv/lib/main.js:142:11)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    ✓ Registered 30 comprehensive waste management tools:

      94 |   server.registerTool(new DatabaseResetTool(apiBaseUrl));
      95 |
    > 96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
         |           ^
      97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
      98 |   console.error("  - 4 Analytics tools");
      99 |   console.error("  - 5 Relationship tools");

      at registerAllTools (src/tools/index.ts:96:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.error
    ✓ Registered 30 comprehensive waste management tools:

      94 |   server.registerTool(new DatabaseResetTool(apiBaseUrl));
      95 |
    > 96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
         |           ^
      97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
      98 |   console.error("  - 4 Analytics tools");
      99 |   console.error("  - 5 Relationship tools");

      at registerAllTools (src/tools/index.ts:96:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 20 CRUD operations (list/get/create/update/delete for 4 resources)

       95 |
       96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
    >  97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
          |           ^
       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");

      at registerAllTools (src/tools/index.ts:97:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 4 Analytics tools

       96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
    >  98 |   console.error("  - 4 Analytics tools");
          |           ^
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");
      101 | }

      at registerAllTools (src/tools/index.ts:98:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 5 Relationship tools

       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
       98 |   console.error("  - 4 Analytics tools");
    >  99 |   console.error("  - 5 Relationship tools");
          |           ^
      100 |   console.error("  - 1 Database management tool");
      101 | }
      102 |

      at registerAllTools (src/tools/index.ts:99:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 1 Database management tool

       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
    > 100 |   console.error("  - 1 Database management tool");
          |           ^
      101 | }
      102 |
      103 | // Export all tools for testing

      at registerAllTools (src/tools/index.ts:100:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 20 CRUD operations (list/get/create/update/delete for 4 resources)

       95 |
       96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
    >  97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
          |           ^
       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");

      at registerAllTools (src/tools/index.ts:97:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.error
      - 4 Analytics tools

       96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
    >  98 |   console.error("  - 4 Analytics tools");
          |           ^
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");
      101 | }

      at registerAllTools (src/tools/index.ts:98:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.error
      - 5 Relationship tools

       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
       98 |   console.error("  - 4 Analytics tools");
    >  99 |   console.error("  - 5 Relationship tools");
          |           ^
      100 |   console.error("  - 1 Database management tool");
      101 | }
      102 |

      at registerAllTools (src/tools/index.ts:99:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.error
      - 1 Database management tool

       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
    > 100 |   console.error("  - 1 Database management tool");
          |           ^
      101 | }
      102 |
      103 | // Export all tools for testing

      at registerAllTools (src/tools/index.ts:100:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Processing query: Get shipments from last week

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Processing query: Get me last week's shipments that got contaminants

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Planning for query: Get me last week's shipments that got contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [LLMProvider] openai failed: 401 Incorrect API key provided: invalid-***********fail. You can find your API key at https://platform.openai.com/account/api-keys.

      43 |         return await adapter.generate(request);
      44 |       } catch (error: any) {
    > 45 |         console.error(`[LLMProvider] ${adapter.name} failed:`, error.message);
         |                 ^
      46 |         errors.push(error);
      47 |       }
      48 |     }

      at LLMProvider.generate (src/shared/llm/provider.ts:45:17)
      at Object.<anonymous> (src/tests/integration/llm/provider.integration.test.ts:93:22)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    📝 Generated summary: Based on the analysis, there were 5 contaminated shipments identified. The data shows a high contamination rate, with 50% of the shipments being contaminated with a confidence level of 90%. No anomalies were detected in the findings.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:51:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/llm/groq.integration.test.ts
  Groq Adapter Integration
    ✓ should be available when API key is set (3 ms)
    ✓ should generate a response for a simple prompt (404 ms)
    ✓ should return usage information (152 ms)
    ✓ should respect temperature configuration (156 ms)
    ✓ should respect max_tokens configuration (177 ms)
    ✓ should handle system messages (147 ms)
    ✓ should have fast inference time (159 ms)
    ✓ should fail with invalid API key (60 ms)
  Groq Adapter Without API Key
    ✓ should not be available when API key is missing (1 ms)

  console.error
    ✓ Registered 30 comprehensive waste management tools:

      94 |   server.registerTool(new DatabaseResetTool(apiBaseUrl));
      95 |
    > 96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
         |           ^
      97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
      98 |   console.error("  - 4 Analytics tools");
      99 |   console.error("  - 5 Relationship tools");

      at registerAllTools (src/tools/index.ts:96:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 20 CRUD operations (list/get/create/update/delete for 4 resources)

       95 |
       96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
    >  97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
          |           ^
       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");

      at registerAllTools (src/tools/index.ts:97:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 4 Analytics tools

       96 |   console.error("✓ Registered 30 comprehensive waste management tools:");
       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
    >  98 |   console.error("  - 4 Analytics tools");
          |           ^
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");
      101 | }

      at registerAllTools (src/tools/index.ts:98:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 5 Relationship tools

       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
       98 |   console.error("  - 4 Analytics tools");
    >  99 |   console.error("  - 5 Relationship tools");
          |           ^
      100 |   console.error("  - 1 Database management tool");
      101 | }
      102 |

      at registerAllTools (src/tools/index.ts:99:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 1 Database management tool

       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
    > 100 |   console.error("  - 1 Database management tool");
          |           ^
      101 | }
      102 |
      103 | // Export all tools for testing

      at registerAllTools (src/tools/index.ts:100:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 2: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Parallel execution took: 10 ms

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:79:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 3, has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { shipment_ids: [ 'S2', 'S4', 'S7' ] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: non-existent-tool

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 0 (non-existent-tool) failed: Tool not found: non-existent-tool

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:121:38)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin', limit: 1 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { facility_id: 'F2', limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 2: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { shipment_ids: [ 'S2', 'S12' ] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    3-level dependency chain results: [
      { success: true, tool: 'facilities_list' },
      { success: true, tool: 'shipments_list' },
      { success: true, tool: 'contaminants_list' }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:157:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'NonExistent' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (shipments_list) failed: Cannot read properties of undefined (reading 'id')

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:174:23)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Error recovery results: [
      { success: true, error: undefined },
      {
        success: false,
        error: "Cannot read properties of undefined (reading 'id')"
      }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:181:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 100 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Timeout handling: { success: true, duration: 4 }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:203:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 1, has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Nested data template test: { success: true, dataLength: 1 }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:223:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 3 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { ids: [ 'F1', 'F2', 'F1' ] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Array mapping test: { step0Success: true, step1Success: true }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:246:15)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 2: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Parallel execution: { duration: 7, success: true }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:271:15)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 2 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 2: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { facility_id: 'F1' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Mixed execution: [
      { success: true, tool: 'facilities_list' },
      { success: true, tool: 'shipments_list' },
      { success: true, tool: 'contaminants_list' }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:292:15)

  console.log
    [ExecutorAgent] Executing plan with 4 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 2: invalid-tool

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 2 (invalid-tool) failed: Tool not found: invalid-tool

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:309:38)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 3: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 4 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Partial failure handling: [
      { success: true },
      { success: true },
      { success: false },
      { success: true }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:319:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 2 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Metadata tracking: [
      { tool: 'shipments_list', execTime: 3 },
      { tool: 'facilities_list', execTime: 3 }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:342:15)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 3 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 2: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 3 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Performance comparison: {
      parallelDuration: 7,
      note: 'Parallel should be faster than sequential'
    }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:360:15)

PASS src/tests/integration/agents/executor.integration.test.ts
  ExecutorAgent Integration
    Simple Execution with Real API
      ✓ should execute shipments query (32 ms)
      ✓ should execute facilities query (12 ms)
    Parallel Execution with Real API
      ✓ should execute independent queries in parallel (10 ms)
    Sequential Execution with Dependencies
      ✓ should execute dependent steps in order (9 ms)
    Error Handling
      ✓ should handle tool not found (2 ms)
    Complex Dependency Chains
      ✓ should execute 3-level dependency chain with real API (39 ms)
      ✓ should handle error recovery in dependency chain (5 ms)
      ✓ should handle timeout for slow API responses (4 ms)
      ✓ should resolve template with nested data ${step[0].data[0].facility.id} (4 ms)
      ✓ should resolve template with array mapping ${step[0].data.*.id} (6 ms)
      ✓ should verify parallel execution is faster than sequential (7 ms)
      ✓ should handle mixed parallel and sequential execution (8 ms)
      ✓ should handle partial failures in dependency chain (13 ms)
      ✓ should track metadata across all steps (7 ms)
      ✓ should measure performance difference: parallel vs sequential (7 ms)

PASS src/tests/integration/conversation/dialog.integration.test.ts
  Conversational Dialog Integration
    Scenario: Ambiguous Query → Clarification → Response
      ✓ should handle clarification flow (1 ms)
    Scenario: Uncertain Result → Express Confidence
      ✓ should express uncertainty for low confidence results
      ✓ should express confidence for high-quality results
    Scenario: Multi-Step Task with Progress
      ✓ should track and report progress through workflow (1 ms)
    Scenario: Follow-Up Questions
      ✓ should detect and handle follow-ups
    Scenario: Yes/No Confirmation
      ✓ should handle confirmation flow
      ✓ should handle negative confirmation

PASS src/tests/integration/workflow/execution.integration.test.ts
  Workflow Execution Integration
    End-to-End Workflow
      ✓ should execute a multi-step workflow
      ✓ should handle conditional branching (1 ms)
    Workflow with Checkpointing
      ✓ should create checkpoints during execution
      ✓ should resume from checkpoint

FAIL src/tests/integration/memory/pinecone.integration.test.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation, specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/yab/Projects/clear-ai-v2/src/tests/integration/memory/pinecone.integration.test.ts:32
    const ollamaAvailable = await isOllamaAvailable();
                            ^^^^^

    SyntaxError: await is only valid in async functions and the top level bodies of modules

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1318:40)

FAIL src/tests/integration/memory/neo4j.integration.test.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation, specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/yab/Projects/clear-ai-v2/src/tests/integration/memory/neo4j.integration.test.ts:30
    const neo4jAvailable = await isNeo4jAvailable();
                           ^^^^^

    SyntaxError: await is only valid in async functions and the top level bodies of modules

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1318:40)

FAIL src/tests/integration/memory/manager.integration.test.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation, specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/yab/Projects/clear-ai-v2/src/tests/integration/memory/manager.integration.test.ts:47
    const neo4jAvailable = await isNeo4jAvailable();
                           ^^^^^

    SyntaxError: await is only valid in async functions and the top level bodies of modules

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1318:40)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Large dataset analysis: { insights: 2, entities: 50, anomalies: 1 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:134:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Same values analysis: { anomalies: 0 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:163:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Different values analysis: { insights: 1, anomalies: 0 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:186:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] openai is not available, skipping...

      at LLMProvider.generate (src/shared/llm/provider.ts:38:19)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/context/compression.integration.test.ts
  Context Compression Integration
    Real LLM Summarization
      ✓ should compress conversation using SUMMARIZE strategy (899 ms)
      ✓ should preserve system messages (465 ms)
    Auto Compression Strategy
      ✓ should automatically select best strategy (563 ms)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show me facilities in Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments from last week',
        timestamp: '2023-10-30T15:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { date_from: '2023-10-23', date_to: '2023-10-29' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    📝 Summary with anomalies: Three facilities are operating above 90% capacity with a confidence level of 95%. Critical contamination was found in 2 shipments, which is a critical issue that needs immediate attention. It is crucial to address the contamination to prevent further issues. Recommendations include investigating the cause of contamination, implementing stricter quality control measures, and conducting thorough checks on all incoming shipments to ensure the facility's operations are not compromised.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:92:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [LLMProvider] openai failed: 401 Incorrect API key provided: invalid-*ey-1. You can find your API key at https://platform.openai.com/account/api-keys.

      43 |         return await adapter.generate(request);
      44 |       } catch (error: any) {
    > 45 |         console.error(`[LLMProvider] ${adapter.name} failed:`, error.message);
         |                 ^
      46 |         errors.push(error);
      47 |       }
      48 |     }

      at LLMProvider.generate (src/shared/llm/provider.ts:45:17)
      at Object.<anonymous> (src/tests/integration/llm/provider.integration.test.ts:161:5)

  console.log
    [LLMProvider] Using groq provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: "Get me last week's shipments that got contaminants",
        timestamp: '2022-02-21T13:45:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {
      date_from: '2022-02-14',
      date_to: '2022-02-20',
      has_contaminants: true
    }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.error
    [LLMProvider] groq failed: 401 Invalid API Key

      43 |         return await adapter.generate(request);
      44 |       } catch (error: any) {
    > 45 |         console.error(`[LLMProvider] ${adapter.name} failed:`, error.message);
         |                 ^
      46 |         errors.push(error);
      47 |       }
      48 |     }

      at LLMProvider.generate (src/shared/llm/provider.ts:45:17)
      at Object.<anonymous> (src/tests/integration/llm/provider.integration.test.ts:161:5)

  console.log
    [LLMProvider] openai is not available, skipping...

      at LLMProvider.generate (src/shared/llm/provider.ts:38:19)

  console.log
    [LLMProvider] groq is not available, skipping...

      at LLMProvider.generate (src/shared/llm/provider.ts:38:19)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id).join(',') at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:89:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    Anomaly detection: { anomalies: 1 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:210:15)

  console.log
    [AnalyzerAgent] Analyzing 3 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [PlannerAgent] Planning for query: Get today's contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Entity extraction: { shipment: true, facility: true, contaminant: true }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:247:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Confidence scoring: [ 0.9, 0.85 ]

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:276:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Empty dataset analysis: Analyzed 1 tool executions. Found 0 insights. Extracted 0 entities. Detected 0 anomalies

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:294:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    Failed results analysis: No successful results to analyze

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:319:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Mixed results analysis: { successful: 1, failed: 1 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:345:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/llm/provider.integration.test.ts
  LLM Provider Integration
    ✓ should use the first available provider (584 ms)
    ✓ should fallback to next provider when first fails (1375 ms)
    ✓ should skip unavailable providers (470 ms)
    ✓ should throw error when all providers fail (388 ms)
    ✓ should throw error when all providers unavailable (2 ms)
    ✓ should work with multiple valid providers (695 ms)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/llm/openai.integration.test.ts (5.259 s)
  OpenAI Adapter Integration
    ✓ should be available when API key is set (5 ms)
    ✓ should generate a response for a simple prompt (571 ms)
    ✓ should return usage information (1266 ms)
    ✓ should respect temperature configuration (291 ms)
    ✓ should respect max_tokens configuration (705 ms)
    ✓ should handle system messages (1028 ms)
    ✓ should fail with invalid API key (205 ms)
  OpenAI Adapter Without API Key
    ✓ should not be available when API key is missing

  console.log
    [OrchestratorAgent] Stored request e4fe9886-0452-4bd4-831e-c8667017fc9b in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][e4fe9886-0452-4bd4-831e-c8667017fc9b] Complete in 3740ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📄 Plain text format: There are 3 shipments identified in the analysis. The data shows a low contamination rate with a con

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:141:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    📋 Response: There were no shipments with contaminants detected in last week's data. The tool used did not retrieve any relevant information with a confidence level of 90%. No anomalies or entities were detected during the analysis. Further investigation or alternative methods may be necessary to obtain the desired information regarding contaminated shipments from last week.

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:109:15)

  console.log
    🔧 Tools used: [ 'shipments_list', 'contaminants_list' ]

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:110:15)

  console.log
    ⏱️  Duration: 3740 ms

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:111:15)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Processing query: Analyse today's contaminants in Hannover

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'location:Hannover' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Analyse today's contaminants in Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 7930cee6-73f7-4411-a2d6-2c3d2c97198f in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][7930cee6-73f7-4411-a2d6-2c3d2c97198f] Complete in 3954ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📋 Complete Response:

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:95:15)

  console.log
    Message: The analysis of the tool execution from last week revealed that the tool 'shipments_list' ran successfully but did not retrieve any data. This result was observed with a confidence level of 80%. No anomalies were detected during the analysis.
    
    Recommendation:
    1. Verify the data source or parameters used by the 'shipments_list' tool to ensure it can retrieve the necessary information.
    2. Consider checking for any issues with the data availability or the tool's configuration that might have caused the lack of data retrieval.
    3. Run the tool again with updated parameters or investigate the source system for any data inconsistencies that could explain the empty result.

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:96:15)

  console.log
    Tools: [ 'shipments_list' ]

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:97:15)

  console.log
    Duration: 3954 ms

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:98:15)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Processing query: Get contaminated shipments and their contaminant details

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments and their contaminant details

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments from last week and their contaminant details

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    LLM insights: {
      count: 2,
      summary: 'Analyzed 1 tool executions. Found 2 insights. Extracted 3 entities. Detected 0 anomalies'
    }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:371:15)

PASS src/tests/integration/agents/analyzer.integration.test.ts (6.934 s)
  AnalyzerAgent Integration
    Real Data Analysis
      ✓ should analyze shipment results with contamination (19 ms)
      ✓ should analyze contaminant data with anomalies (6 ms)
    LLM-Based Analysis
      ✓ should generate insights with real LLM (1808 ms)
    Multi-Tool Analysis
      ✓ should analyze results from multiple tools (3 ms)
    Large Dataset Analysis
      ✓ should analyze LLM with large dataset (50+ records) (3 ms)
      ✓ should handle statistical analysis edge case: all same values (3 ms)
      ✓ should handle statistical analysis edge case: all different values (2 ms)
      ✓ should detect anomalies with various thresholds (1358 ms)
      ✓ should extract entities from different data types (4 ms)
      ✓ should score confidence accurately across different patterns (5 ms)
      ✓ should handle completely empty dataset (4 ms)
      ✓ should handle all failed tool results (2 ms)
      ✓ should handle mixed success/failure results (5 ms)
      ✓ should generate quality insights with real LLM (2333 ms)

  console.log
    
    📊 Large dataset summary length: 700

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:171:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get contaminated shipments and their contaminant details',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:102:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: "Analyse today's contaminants in Hannover",
        timestamp: '2023-10-23T12:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Hannover' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:115:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    📝 Markdown format detected: true

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:199:15)

  console.log
    Sample: - Facility A has a 30% higher throughput compared to other facilities with a confidence level of 90%.
    - There is a trend of increasing contamination r

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:200:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    👔 Professional tone: Critical contamination has been detected with high-risk contaminants showing an increasing trend wit

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:225:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Analyse today's contaminants in Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

FAIL src/tests/integration/llm/ollama.integration.test.ts (9.001 s)
  Ollama Adapter Integration
    ✓ should detect if Ollama is running (3 ms)
    ✓ should be available when Ollama is running (5 ms)
    ✕ should generate a response for a simple prompt (5059 ms)
    ✓ should respect temperature configuration (1411 ms)
    ✓ should respect max_tokens (num_predict) configuration (454 ms)
    ✓ should handle system messages (448 ms)
    ✓ should format multi-turn conversations (317 ms)
  Ollama Adapter Without Server
    ✓ should not be available when Ollama is not running (1 ms)

  ● Ollama Adapter Integration › should generate a response for a simple prompt

    socket hang up

      32 |     const prompt = this.formatMessages(request.messages);
      33 |     
    > 34 |     const response = await axios.post(`${this.baseUrl}/api/generate`, {
         |                      ^
      35 |       model: this.config.model || 'mistral:latest',
      36 |       prompt,
      37 |       stream: false,

      at Function.AxiosError.from (node_modules/axios/lib/core/AxiosError.js:96:14)
      at RedirectableRequest.handleRequestError (node_modules/axios/lib/adapters/http.js:638:25)
      at ClientRequest.eventHandlers.<computed> (node_modules/follow-redirects/index.js:49:24)
      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)
      at OllamaAdapter.generate (src/shared/llm/adapters/ollama.ts:34:22)
      at Object.<anonymous> (src/tests/integration/llm/ollama.integration.test.ts:68:22)

    Cause:
    socket hang up


  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: From the inspections accepted this week, did we detect any risky contaminants?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request e5a062f7-2e64-483f-b4de-5ab5854513b0 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][e5a062f7-2e64-483f-b4de-5ab5854513b0] Complete in 4453ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    💡 Insights: 2

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:113:17)

  console.log
    🏷️  Entities: 4

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:114:17)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Processing query: test query

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: test query

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 9062fe32-8957-4b85-81ef-6ed15c8b7c28 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][9062fe32-8957-4b85-81ef-6ed15c8b7c28] Complete in 4763ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📋 Response: Today's contaminants in Hannover were analyzed, revealing the following insights:
    1. The Hannover Sorting Center is operating at 64% capacity, handling a current load of 320 tons out of its 500-ton capacity.
    2. Accepted waste types at the center include plastic, metal, paper, and glass, while hazardous and medical waste types are rejected.
    
    No anomalies were detected in the analysis.
    
    Recommendation: Based on the findings, it is suggested to monitor and optimize the waste processing operations at the Hannover Sorting Center to ensure efficient utilization of its capacity and proper handling of waste types. Regular reviews of the waste acceptance criteria can also help maintain operational efficiency and safety.

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:129:15)

  console.log
    🔧 Tools used: [ 'facilities_list', 'contaminants_list' ]

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:130:15)

  console.log
    [OrchestratorAgent][5258e3b5-549a-401b-9bcf-d40c14965a56] Processing query: From the inspections accepted this week, did we detect any risky contaminants?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][5258e3b5-549a-401b-9bcf-d40c14965a56] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][5258e3b5-549a-401b-9bcf-d40c14965a56] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: From the inspections accepted this week, did we detect any risky contaminants?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    🔬 Technical tone: The statistical analysis of the shipment data revealed the following key findings:
    1. The mean conta

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:248:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:123:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    😊 Casual tone: Overall, the quick check on shipments shows that things are looking good with a confidence level of

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:271:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    📋 Data-only response: The query for data was executed successfully. No insights or anomalies were found during the analysis. Two entities were identified in the data.
    
    Recommendation: Further analysis or specific instructions are needed to provide more detailed insights or actions based on the data retrieved.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:294:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:123:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][5258e3b5-549a-401b-9bcf-d40c14965a56] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'From the inspections accepted this week, did we detect any risky contaminants?',
        timestamp: '2022-01-10T15:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][5258e3b5-549a-401b-9bcf-d40c14965a56] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.error
    [OrchestratorAgent][5258e3b5-549a-401b-9bcf-d40c14965a56] Error: Error: Circular dependency detected in plan
        at ExecutorAgent.detectCircularDependencies (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:124:17)
        at ExecutorAgent.buildExecutionGraph (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:95:10)
        at ExecutorAgent.execute (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:41:24)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:62:43)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/system.integration.test.ts:134:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:134:24)

  console.log
    
    ⚠️  Query resulted in error (likely no data available): I encountered an error processing your request: Circular dependency detected in plan

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:150:17)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Processing query: Show me contaminated shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me contaminated shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show inspections from this week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'test query',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    📚 Many insights summary length: 946

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:320:15)

  console.log
    Insights summarized: 12

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:321:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me contaminated shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:157:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get today's contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    🤖 LLM-enhanced summary: The analysis identified an unusual pattern that requires contextual understanding and domain expertise to interpret correctly with a confidence level

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:354:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    ∅ Empty analysis message: No data was found in the analysis for the empty query.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:372:15)

PASS src/tests/integration/agents/summarizer.integration.test.ts (14.813 s)
  SummarizerAgent Integration
    Real LLM Summarization
      ✓ should generate summary with real LLM (851 ms)
      ✓ should handle complex analysis with anomalies (1620 ms)
    Response Quality
      ✓ should produce readable responses (1073 ms)
    Output Formats
      ✓ should produce plain text output with small dataset (775 ms)
      ✓ should produce plain text output with large dataset (1328 ms)
      ✓ should produce markdown output format with tables and lists (925 ms)
    Tone Control
      ✓ should use professional tone with formal language (543 ms)
      ✓ should use technical tone with detailed metrics (2154 ms)
      ✓ should use casual tone with simplified language (567 ms)
    Edge Cases
      ✓ should handle summarization with no insights (data-only response) (882 ms)
      ✓ should handle summarization with many insights (10+ insights) (1365 ms)
      ✓ should handle LLM fallback when needed (884 ms)
      ✓ should handle empty analysis gracefully (457 ms)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show me the same data

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][77e937bd-1b78-4d1f-bb0c-0bf8fe0edd0a] Complete in 5531ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📊 Analysis Summary: Analyzed 1 tool executions. Found 2 insights. Extracted 4 entities. Detected 0 anomalies

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:170:15)

  console.log
    💡 Insights found: 2

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:171:15)

  console.log
    🏷️  Entities extracted: 4

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:172:15)

  console.log
    ⚠️  Anomalies detected: 0

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:173:15)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Processing query: Get facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: show me shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request b1ad49cb-4ee1-4a2f-ac68-00909a0301d5 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][b1ad49cb-4ee1-4a2f-ac68-00909a0301d5] Complete in 8626ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Processing query: show me the same

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Loaded context: {
      semantic: [
        {
          text: 'Previous query about shipments',
          score: 0.9,
          metadata: {}
        }
      ],
      episodic: undefined,
      entities: []
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: show me the same

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'show me the same',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 10 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: contaminated shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get all facilities and their shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments and their details

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request b3f7e7a3-2ec4-49c0-91f3-c408b3ade145 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][b3f7e7a3-2ec4-49c0-91f3-c408b3ade145] Complete in 6232ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Processing query: Get contaminated shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 4e68967c-a140-4ff7-9005-cbbcd413c630 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][4e68967c-a140-4ff7-9005-cbbcd413c630] Complete in 5165ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][2f7c55f9-2a29-449a-94fb-f1e247ac9af9] Processing query: xyz invalid 123

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][2f7c55f9-2a29-449a-94fb-f1e247ac9af9] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][2f7c55f9-2a29-449a-94fb-f1e247ac9af9] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: xyz invalid 123

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show me all shipments from Berlin and Munich facilities from the last month

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get contaminated shipments',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:189:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Which carriers have the highest contamination rates?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.error
    [OrchestratorAgent][2f7c55f9-2a29-449a-94fb-f1e247ac9af9] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Processing query: show me their shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Loaded context: {
      semantic: [
        {
          text: 'Previous query: Get facilities in Berlin',
          score: 0.95,
          metadata: [Object]
        },
        {
          text: 'Facility F1 has capacity issues',
          score: 0.85,
          metadata: [Object]
        }
      ],
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: show me their shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 9342e6bc-c768-4fdf-ac74-78773989bb4e in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][9342e6bc-c768-4fdf-ac74-78773989bb4e] Complete in 4028ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Processing query: Get shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show me recent shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'show me their shipments',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get shipments from October 1st to October 10th going to Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    Extracted plan: {
      "steps": [
        {
          "tool": "facilities_list",
          "params": {
            "location": "Hannover"
          },
          "depends_on": [],
          "parallel": false
        },
        {
          "tool": "shipments_list",
          "params": {
            "date_from": "2023-10-01",
            "date_to": "2023-10-10",
            "facility_id": "${step[0].data.ids}"
          },
          "depends_on": [
            0
          ],
          "parallel": false
        }
      ],
      "metadata": {
        "query": "Get shipments from October 1st to October 10th going to Hannover",
        "timestamp": "2023-10-10T15:30:00Z",
        "estimated_duration_ms": 2000
      }
    }

      at Object.<anonymous> (src/tests/integration/agents/planner.integration.test.ts:361:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    GraphQL Server stopped

      at src/graphql/server.ts:152:17

FAIL src/tests/graphql/server.integration.test.ts (31.732 s)
  ● GraphQL Server Integration › Server Startup › should start successfully

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › Server Startup › should respond to health check

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › GraphQL Endpoint › should handle introspection query

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › GraphQL Endpoint › should execute query through GraphQL

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › GraphQL Endpoint › should execute mutation through GraphQL

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › GraphQL Endpoint › should handle GraphQL errors

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › GraphQL Endpoint › should handle invalid JSON

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › Context Propagation › should pass orchestrator and memory to resolvers

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › Context Propagation › should allow memory context queries

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › CORS Configuration › should include CORS headers

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › Error Handling › should handle orchestrator errors gracefully

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)

  ● GraphQL Server Integration › Error Handling › should handle memory errors gracefully

    thrown: "Exceeded timeout of 30000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      14 |   let mockMemory: jest.Mocked<MemoryManager>;
      15 |
    > 16 |   beforeAll(async () => {
         |   ^
      17 |     // Create mocks with unique request IDs
      18 |     let requestCounter = 0;
      19 |     mockOrchestrator = {

      at src/tests/graphql/server.integration.test.ts:16:3
      at Object.<anonymous> (src/tests/graphql/server.integration.test.ts:11:1)


  ● Test suite failed to run

    listen EADDRINUSE: address already in use 0.0.0.0:4001


  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get facilities in Berlin, then get their shipments, then check for contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request a57913ed-a7d3-4155-b1bf-2a2ef6a9102b in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][a57913ed-a7d3-4155-b1bf-2a2ef6a9102b] Complete in 6645ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🧠 Follow-up query with context: {
      message: 'The analysis of the shipments data revealed the following key findings:\n' +
        '1. A trend of increasing wei',
      contextLoaded: 1
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:179:15)

  console.log
    [OrchestratorAgent][614d4427-b51c-49bf-9cc6-d21e572c1e4e] Processing query: Get data from nonexistent source XYZ

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][614d4427-b51c-49bf-9cc6-d21e572c1e4e] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][614d4427-b51c-49bf-9cc6-d21e572c1e4e] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get data from nonexistent source XYZ

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 07c5b85f-ccd7-4cf2-b551-8e85a6e14b28 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][07c5b85f-ccd7-4cf2-b551-8e85a6e14b28] Complete in 6860ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Processing query: Get facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Which facilities are near capacity?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.error
    [OrchestratorAgent][614d4427-b51c-49bf-9cc6-d21e572c1e4e] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.log
    
    ⚠️  Error propagated correctly: I encountered an error processing your request: Failed to generate valid plan after 3 attempts: [

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:195:17)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Processing query: Get shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.error
    [OrchestratorAgent] Failed to load context: Error: Memory unavailable
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:202:52)
        at Promise.finally.completed (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:1557:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:1497:10)
        at _callCircusTest (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:1007:40)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at _runTest (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:947:3)
        at /Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:849:7
        at _runTestsForDescribeBlock (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:862:11)
        at _runTestsForDescribeBlock (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:857:11)
        at _runTestsForDescribeBlock (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:857:11)
        at run (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:761:3)
        at runAndTransformResultsToJestFormat (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/jestAdapterInit.js:1918:21)
        at jestAdapter (/Users/yab/Projects/clear-ai-v2/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/yab/Projects/clear-ai-v2/node_modules/jest-runner/build/testWorker.js:275:16)
        at runTest (/Users/yab/Projects/clear-ai-v2/node_modules/jest-runner/build/testWorker.js:343:7)
        at Object.worker (/Users/yab/Projects/clear-ai-v2/node_modules/jest-runner/build/testWorker.js:497:12)

      156 |       };
      157 |     } catch (error) {
    > 158 |       console.error('[OrchestratorAgent] Failed to load context:', error);
          |               ^
      159 |       return {};
      160 |     }
      161 |   }

      at OrchestratorAgent.loadContext (src/agents/orchestrator.ts:158:15)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:51:19)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:204:24)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Loaded context: {}

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

PASS src/tests/integration/agents/planner.integration.test.ts (36.596 s)
  PlannerAgent Integration
    Simple Queries
      ✓ should generate plan for shipment query with real LLM (1961 ms)
      ✓ should generate plan for facility query (1112 ms)
      ✓ should generate plan for contaminant query (2314 ms)
    Complex Queries with Dependencies
      ✓ should generate multi-step plan for nested query (2029 ms)
      ✓ should generate plan for location-based nested query (1323 ms)
      ✓ should handle inspection-based queries (1127 ms)
    Temporal References
      ✓ should correctly parse "last week" reference (1290 ms)
      ✓ should correctly parse "this week" reference (1368 ms)
      ✓ should correctly parse "today" reference (1412 ms)
    Plan Metadata
      ✓ should include query in metadata (1149 ms)
      ✓ should include timestamp in metadata (1092 ms)
    Context Handling
      ✓ should incorporate context into planning (1292 ms)
    Error Handling
      ✓ should handle simple queries without complexity (1072 ms)
      ✓ should handle queries with filters (1563 ms)
    Plan Validation
      ✓ should produce executable plans with valid tool names (1330 ms)
      ✓ should produce plans with valid dependencies (1724 ms)
    Complex Multi-Facility Queries
      ✓ should handle queries across multiple facilities with temporal context (1649 ms)
      ✓ should generate plan requiring data aggregation across multiple tools (1702 ms)
      ✓ should handle ambiguous queries with reasonable assumptions (1468 ms)
      ✓ should extract parameters from natural language (dates, locations, IDs) (2116 ms)
      ✓ should check tool availability before planning (863 ms)
      ✓ should create dependency chain for sequential queries (2103 ms)
      ✓ should generate metadata with timestamps and estimated duration (1183 ms)
      ✓ should handle capacity-related facility queries (882 ms)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request b8db9d84-716c-4c73-b7c2-0e68bd9dd58d in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][b8db9d84-716c-4c73-b7c2-0e68bd9dd58d] Complete in 5694ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    
    💾 Query without memory succeeded: true

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:210:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][fef65551-1598-4ee6-8a06-bef8925b6004] Processing query: Query 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][fef65551-1598-4ee6-8a06-bef8925b6004] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][fef65551-1598-4ee6-8a06-bef8925b6004] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Query 1

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 11af040d-54a6-4dd7-a82f-afcd3f555af7 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][11af040d-54a6-4dd7-a82f-afcd3f555af7] Complete in 8369ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][85d7ec34-a010-467c-9162-205c84b46598] Processing query: invalid tool request xyz

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][85d7ec34-a010-467c-9162-205c84b46598] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][85d7ec34-a010-467c-9162-205c84b46598] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: invalid tool request xyz

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.error
    [OrchestratorAgent][fef65551-1598-4ee6-8a06-bef8925b6004] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.log
    [OrchestratorAgent][be6a9ded-aa3a-44b6-9d14-faf6884fb7a4] Processing query: Query 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][be6a9ded-aa3a-44b6-9d14-faf6884fb7a4] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][be6a9ded-aa3a-44b6-9d14-faf6884fb7a4] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Query 2

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.error
    [OrchestratorAgent][85d7ec34-a010-467c-9162-205c84b46598] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/system.integration.test.ts:209:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Processing query: Show me all shipments from last week with contaminants

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me all shipments from last week with contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me all shipments from last week with contaminants',
        timestamp: '2023-01-16T08:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {
      date_from: '2023-01-09',
      date_to: '2023-01-15',
      has_contaminants: true
    }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id).join(',') at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:220:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.error
    [OrchestratorAgent][be6a9ded-aa3a-44b6-9d14-faf6884fb7a4] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Processing query: Query 3

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Query 3

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][2f5d2e0c-2afa-4d14-ad5b-b40141e0af8e] Complete in 3184ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📦 Blueprint 1 - Contaminated shipments: {
      message: 'There were no shipments from last week with contaminants in the data analyzed. The tool did not return any relevant data, indicating a lack of shipmen',
      tools: [ 'shipments_list', 'contaminants_list' ]
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:228:15)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Processing query: Which facilities received the most rejected shipments?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Which facilities received the most rejected shipments?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Query 3',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object] },
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Which facilities received the most rejected shipments?',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { status: 'rejected', limit: 1 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (facilities_list) failed: Path not found: .facility_id at facility_id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:235:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 8d1b59bf-1ed3-4837-89ab-d238f0b1df9e in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][8d1b59bf-1ed3-4837-89ab-d238f0b1df9e] Complete in 5175ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🏭 Blueprint 2 - Rejected shipments by facility: {
      message: 'The facility that received the most rejected shipments was not specified in the analysis. However, one key finding revealed a correlation between the ',
      insights: 2
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:248:15)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Processing query: What are the most common contaminants detected this month?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: What are the most common contaminants detected this month?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'What are the most common contaminants detected this month?',
        timestamp: '2023-03-15T13:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { type: 'detection' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Step 0 did not produce valid data

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:255:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce] Complete in 8373ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🆔 Request IDs generated: {
      req1: 'fef65551-1598-4ee6-8a06-bef8925b6004',
      req2: 'be6a9ded-aa3a-44b6-9d14-faf6884fb7a4',
      req3: 'b6e4b1bf-7509-4a3a-aa23-cc0f25d017ce'
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:232:15)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Processing query: Analyze shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Analyze shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 41bff828-4c1e-42ce-b777-b30cf0eea95a in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][41bff828-4c1e-42ce-b777-b30cf0eea95a] Complete in 2786ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🧪 Blueprint 3 - Common contaminants: {
      message: 'There were no successful results to analyze for the detection of common contaminants this month.',
      entities: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:265:15)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Processing query: Show me high-risk contaminants detected in Berlin facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'location:Berlin' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me high-risk contaminants detected in Berlin facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Analyze shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me high-risk contaminants detected in Berlin facilities',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:272:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 06ee6b37-66bd-43d1-862e-ca816b3dbc44 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][06ee6b37-66bd-43d1-862e-ca816b3dbc44] Complete in 4818ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    ⚠️  Blueprint 4 - High-risk contaminants in Berlin: {
      message: 'High-risk contaminants were not specifically detected in Berlin facilities during the analysis. However, key insights reveal that the Berlin Processin',
      anomalies: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:279:15)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Processing query: What is the acceptance rate for each facility?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:facility' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: What is the acceptance rate for each facility?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 27ee03f7-15ea-40a0-bb9f-ca138fbaadba in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][27ee03f7-15ea-40a0-bb9f-ca138fbaadba] Complete in 5838ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📊 Metrics collected: { duration: 5838, toolsUsed: 1, timestamp: '2025-10-12T14:26:12.145Z' }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:251:15)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Processing query: Get shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Processing query: Get facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Processing query: Get inspections

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)
          at async Promise.all (index 0)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)
          at async Promise.all (index 1)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)
          at async Promise.all (index 2)

  console.log
    [PlannerAgent] Planning for query: Get inspections

      at PlannerAgent.plan (src/agents/planner.ts:60:13)
          at async Promise.all (index 2)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 0)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 1)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 2)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Plan generated: {
      steps: [ { tool: 'facilities_list', params: {}, parallel: false } ],
      metadata: {
        query: 'What is the acceptance rate for each facility?',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get inspections',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Executing step 0: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)
          at async Promise.all (index 2)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)
          at async Promise.all (index 0)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)
          at async Promise.all (index 2)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)
          at async Promise.all (index 0)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)
          at async Promise.all (index 1)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)
          at async Promise.all (index 0)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)
          at async Promise.all (index 0)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)
          at async Promise.all (index 2)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)
          at async Promise.all (index 2)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent] Stored request 74d9748c-0beb-41e9-99c8-b976bd598c9f in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][74d9748c-0beb-41e9-99c8-b976bd598c9f] Complete in 5407ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📊 Blueprint 5 - Acceptance rates: {
      message: 'The analysis did not specifically provide the acceptance rates for each facility. However, two key insights were identified: \n' +
        '1. There is a variation ',
      insights: 2
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:299:15)

  console.log
    [OrchestratorAgent][3c1f4532-a749-4616-99bc-07b0df6fb037] Processing query: Show me shipments with HCl levels above medium

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][3c1f4532-a749-4616-99bc-07b0df6fb037] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][3c1f4532-a749-4616-99bc-07b0df6fb037] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me shipments with HCl levels above medium

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)
          at async Promise.all (index 1)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)
          at async Promise.all (index 1)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent] Stored request 7a3e28f2-21db-4d4b-98c2-382d02d07d96 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][7a3e28f2-21db-4d4b-98c2-382d02d07d96] Complete in 5907ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent] Stored request 05f08333-0363-4b10-9ca6-a15ed0344538 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][05f08333-0363-4b10-9ca6-a15ed0344538] Complete in 6053ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)
          at async Promise.all (index 1)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][3c1f4532-a749-4616-99bc-07b0df6fb037] Plan generated: {
      steps: [
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me shipments with HCl levels above medium',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][3c1f4532-a749-4616-99bc-07b0df6fb037] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.error
    [OrchestratorAgent][3c1f4532-a749-4616-99bc-07b0df6fb037] Error: Error: Circular dependency detected in plan
        at ExecutorAgent.detectCircularDependencies (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:124:17)
        at ExecutorAgent.buildExecutionGraph (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:95:10)
        at ExecutorAgent.execute (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:41:24)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:62:43)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/system.integration.test.ts:306:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:306:24)

  console.log
    
    🔬 Blueprint 6 - HCl levels: {
      message: 'I encountered an error processing your request: Circular dependency detected in plan',
      tools: []
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:313:15)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Processing query: Which carriers have the highest contamination rates?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Which carriers have the highest contamination rates?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 43c96e0e-89d3-4bc3-b4be-3eb721385c51 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][43c96e0e-89d3-4bc3-b4be-3eb721385c51] Complete in 6660ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)
          at async Promise.all (index 2)

  console.log
    
    ⚡ Concurrent execution: {
      totalTime: 6661,
      query1: 5907,
      query2: 6053,
      query3: 6660,
      allSucceeded: true
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:279:15)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Processing query: Get contaminated shipments from last week

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Which carriers have the highest contamination rates?',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id).join(',') at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:320:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get contaminated shipments from last week',
        timestamp: '2022-01-17T08:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {
      date_from: '2022-01-10',
      date_to: '2022-01-16',
      has_contaminants: true
    }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:292:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 34af5828-50bf-4f12-b3d1-828b2d831dbf in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][34af5828-50bf-4f12-b3d1-828b2d831dbf] Complete in 3418ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    ⚙️  Planner config test: { toolsUsed: [ 'shipments_list', 'contaminants_list' ], success: true }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:300:15)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Processing query: Analyze facility capacity

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:facility' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Analyze facility capacity

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][322f67d3-3d9f-4f3a-a71d-f6c3d416fc8d] Complete in 4224ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🚚 Blueprint 7 - Carrier contamination rates: {
      message: 'The carriers with the highest contamination rates are not explicitly mentioned in the analysis results. However, the analysis revealed a pattern where',
      insights: 2
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:331:15)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Processing query: Show me inspection failures by waste type

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me inspection failures by waste type

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Plan generated: {
      steps: [ { tool: 'facilities_list', params: {}, parallel: false } ],
      metadata: {
        query: 'Analyze facility capacity',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me inspection failures by waste type',
        timestamp: '2022-01-15T10:00:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { status: 'failed', limit: 100 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 534b4beb-813e-4ce8-b047-17b47e5c6e4e in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][534b4beb-813e-4ce8-b047-17b47e5c6e4e] Complete in 1458ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🔍 Blueprint 8 - Inspection failures: {
      message: 'There were no inspection failures by waste type found in the analysis.',
      entities: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:349:15)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Processing query: What facilities are near capacity?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: What facilities are near capacity?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Plan generated: {
      steps: [ { tool: 'facilities_list', params: [Object] } ],
      metadata: {
        query: 'What facilities are near capacity?',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { min_capacity: '90%', ids: [] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request f48be309-9ee4-4714-a277-5a156e467bcd in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][f48be309-9ee4-4714-a277-5a156e467bcd] Complete in 5453ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🔍 Analyzer mode test: { hasAnalysis: true, insights: 3 }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:320:15)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Processing query: Show me inspection results

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me inspection results

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me inspection results',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request a6521869-561e-4ccb-8d64-d5523a0d3829 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][a6521869-561e-4ccb-8d64-d5523a0d3829] Complete in 6384ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📈 Blueprint 9 - Near capacity facilities: {
      message: 'Based on the analysis, most facilities are experiencing higher current loads compared to their capacity. There is a notable correlation between a faci',
      anomalies: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:367:15)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Processing query: Show me contaminant trends over the past 30 days

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me contaminant trends over the past 30 days

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Plan generated: {
      steps: [
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me contaminant trends over the past 30 days',
        timestamp: '2022-01-30T15:00:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { date_from: '2022-01-01', date_to: '2022-01-30' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 20bbeef7-d173-48e3-98e5-c4f416266f5b in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][20bbeef7-d173-48e3-98e5-c4f416266f5b] Complete in 3689ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📉 Blueprint 10 - Contaminant trends: {
      message: 'The analysis of contaminant trends over the past 30 days did not yield any data. The contaminants_list tool did not return any information, with a hig',
      insights: 1
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:385:15)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Processing query: Get shipments from NonExistentFacility123

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments from NonExistentFacility123

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments from NonExistentFacility123',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'NonExistentFacility123' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (shipments_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:394:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request cd86704a-cb23-4e73-b732-f3cce8f98506 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][cd86704a-cb23-4e73-b732-f3cce8f98506] Complete in 9139ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    📝 Summarizer format test: { messageLength: 539, hasAnalysis: true }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:335:15)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Processing query: Get all shipments from Berlin facilities, analyze contamination patterns, and summarize the findings

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get all shipments from Berlin facilities, analyze contamination patterns, and summarize the findings

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][dae6f370-4e2a-47f9-9e31-b56bf2a4d7e7] Complete in 4029ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    ❌ Error recovery - Non-existent facility: {
      message: "The analysis indicates that the 'facilities_list' tool execution was successful, but it did not retu",
      error: undefined
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:403:15)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Processing query: Get facilities in Berlin

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'location:Berlin' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities in Berlin

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Plan generated: {
      steps: [
        { tool: 'facilities_list', params: [Object], parallel: false },
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get all shipments from Berlin facilities, analyze contamination patterns, and summarize the findings',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 3000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities in Berlin',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (shipments_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:344:24)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 2: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 2 (contaminants_list) failed: Step 1 did not produce valid data

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:344:24)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Execution complete. Results: 3

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 3 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 6f198dce-02fb-4aa3-941e-ef7571a73f3b in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][6f198dce-02fb-4aa3-941e-ef7571a73f3b] Complete in 2892ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Processing query: Show me their shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me their shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me their shipments',
        timestamp: '2022-01-15T10:00:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request a3c86f3d-70f3-4d0d-a8ce-2073f637ab55 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][a3c86f3d-70f3-4d0d-a8ce-2073f637ab55] Complete in 5651ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    🔄 Multi-agent pipeline: {
      tools: [ 'facilities_list', 'shipments_list', 'contaminants_list' ],
      insights: 2,
      messageLength: 667
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:356:15)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Processing query: Get 5 recent shipments with contaminants

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get 5 recent shipments with contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get 5 recent shipments with contaminants',
        timestamp: '2022-01-15T08:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true, limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id).join(',') at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:364:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 7ca6d61d-8ccb-4fb6-82fd-9985770dacb2 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][7ca6d61d-8ccb-4fb6-82fd-9985770dacb2] Complete in 4945ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    ✓ Data consistency check: { toolsUsed: 2, entities: 4, hasMessage: true }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:377:15)

PASS src/tests/integration/agents/orchestrator.integration.test.ts (97.138 s)
  OrchestratorAgent Integration
    Complete Pipeline Execution
      ✓ should execute full query flow (3959 ms)
      ✓ should handle complex nested queries (4456 ms)
    Memory Integration
      ✓ should store query in memory (8626 ms)
      ✓ should load context from memory (5166 ms)
    Error Recovery
      ✓ should handle errors gracefully (2751 ms)
    Advanced Memory Integration
      ✓ should load memory context for follow-up queries (6647 ms)
      ✓ should propagate errors through full pipeline (2892 ms)
      ✓ should work with different memory configurations (5695 ms)
    Request Tracking
      ✓ should generate unique request IDs (13824 ms)
      ✓ should collect execution metrics (5840 ms)
    Concurrent Query Handling
      ✓ should handle 3 queries in parallel (6663 ms)
    Configuration Variations
      ✓ should work with different planner configurations (3419 ms)
      ✓ should work with different analyzer modes (5454 ms)
      ✓ should work with different summarizer formats (9140 ms)
    Complex Scenarios
      ✓ should handle queries requiring multiple agents in sequence (5654 ms)
      ✓ should maintain data consistency through pipeline (4947 ms)

  console.log
    [OrchestratorAgent] Stored request 9813bfe1-c98b-4c61-9117-51625416b2c3 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][9813bfe1-c98b-4c61-9117-51625416b2c3] Complete in 6484ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    💬 Memory-based follow-up: {
      query1: 'The Berlin Processing Plant in Berlin has a capacity of 1000 tons and is currently operating at 75% ',
      query2: 'The analysis of the shipments data revealed insights that indicate:\n' +
        '1. There is a trend of increasin',
      bothSucceeded: true
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:422:15)

PASS src/tests/integration/agents/system.integration.test.ts (97.355 s)
  System Integration - Complete Agent Pipeline
    End-to-End Query Scenarios
      ✓ should handle: "Get me last week's shipments that got contaminants" (3747 ms)
      ✓ should handle: "Analyse today's contaminants in Hannover" (4767 ms)
      ✓ should handle: "From inspections accepted this week, did we detect any risky contaminants?" (1688 ms)
    Agent Pipeline Verification
      ✓ should execute complete pipeline: Plan → Execute → Analyze → Summarize (5533 ms)
      ✓ should track execution time and request ID (6235 ms)
    Memory Integration
      ✓ should store query results in memory (4028 ms)
      ✓ should handle multiple queries in sequence (15231 ms)
    Error Handling
      ✓ should handle queries that might fail gracefully (2250 ms)
    Blueprint Example Queries
      ✓ Blueprint 1: Show me all shipments from last week with contaminants (3186 ms)
      ✓ Blueprint 2: Which facilities received the most rejected shipments? (5179 ms)
      ✓ Blueprint 3: What are the most common contaminants detected this month? (2789 ms)
      ✓ Blueprint 4: Show me high-risk contaminants detected in Berlin facilities (4819 ms)
      ✓ Blueprint 5: What is the acceptance rate for each facility? (5409 ms)
      ✓ Blueprint 6: Show me shipments with HCl levels above medium (1356 ms)
      ✓ Blueprint 7: Which carriers have the highest contamination rates? (4225 ms)
      ✓ Blueprint 8: Show me inspection failures by waste type (1459 ms)
      ✓ Blueprint 9: What facilities are near capacity? (6386 ms)
      ✓ Blueprint 10: Show me contaminant trends over the past 30 days (3690 ms)
    Error Recovery Scenarios
      ✓ should handle non-existent facility queries (4031 ms)
      ✓ should handle follow-up questions based on previous query context (9377 ms)

A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.
Test Suites: 5 failed, 12 passed, 17 total
Tests:       13 failed, 146 passed, 159 total
Snapshots:   0 total
Time:        98.559 s
Ran all test suites matching integration.
