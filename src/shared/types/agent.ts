/**
 * Agent-related type definitions
 * Core types used by Planner, Executor, Analyzer, and Summarizer agents
 */

/**
 * Plan generated by Planner Agent
 */
export interface Plan {
  steps: PlanStep[];
  metadata?: PlanMetadata | undefined;
}

export interface PlanStep {
  tool: string;
  params: Record<string, any>;
  depends_on?: number[] | undefined; // Indices of steps this depends on
  parallel?: boolean | undefined; // Can be run in parallel
}

export interface PlanMetadata {
  query: string;
  timestamp: string;
  estimated_duration_ms?: number | undefined;
}

/**
 * Tool execution result from Executor Agent
 */
export interface ToolResult {
  success: boolean;
  tool: string;
  data?: any;
  error?: ErrorDetails;
  metadata: ToolResultMetadata;
}

export interface ToolResultMetadata {
  executionTime: number;
  timestamp: string;
  retries?: number;
}

export interface ErrorDetails {
  code: string;
  message: string;
  details?: any;
}

/**
 * Analysis from Analyzer Agent
 */
export interface Analysis {
  summary: string;
  insights: Insight[];
  entities: Entity[];
  anomalies: Anomaly[];
  metadata: AnalysisMetadata;
}

export interface Insight {
  type: 'trend' | 'pattern' | 'correlation' | 'comparison';
  description: string;
  confidence: number; // 0-1
  supporting_data: any[];
}

export interface Entity {
  id: string;
  type: string;
  name: string;
  attributes: Record<string, any>;
  relationships?: Relationship[];
}

export interface Relationship {
  type: string;
  target_entity_id: string;
  strength?: number;
}

export interface Anomaly {
  type: 'outlier' | 'unexpected' | 'missing' | 'threshold_exceeded';
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  affected_entities: string[];
  data: any;
}

export interface AnalysisMetadata {
  tool_results_count: number;
  successful_results?: number;
  failed_results?: number;
  analysis_time_ms: number;
}

/**
 * Final response from Summarizer Agent
 */
export interface FinalResponse {
  message: string;
  tools_used: string[];
  data?: any;
  analysis?: Analysis;
  metadata: ResponseMetadata;
}

export interface ResponseMetadata {
  request_id: string;
  total_duration_ms: number;
  timestamp: string;
  error?: boolean;
}

