name: Agent System Tests

on:
  pull_request:
    branches: [main, develop, chore/graphqql-integration-tests]
  push:
    branches: [main]
  workflow_dispatch:

env:
  STAGING_URL: ${{ secrets.STAGING_GRAPHQL_ENDPOINT }}

jobs:
  agent-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for baseline comparisons

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install root dependencies
        run: yarn install --frozen-lockfile

      - name: Install agent-tester dependencies
        run: cd agent-tester && yarn install --frozen-lockfile

      - name: Build root project
        run: yarn build

      - name: Build agent-tester
        run: cd agent-tester && yarn build

      - name: Run agent tests against staging
        id: agent-tests
        continue-on-error: true
        run: |
          cd agent-tester
          node dist/index.js run --all \
            --endpoint "${{ secrets.STAGING_GRAPHQL_ENDPOINT }}" \
            --parallel 5 \
            --export ../results/ci-run-${{ github.run_id }}.json \
            --html ../results/ci-run-${{ github.run_id }}.html \
            --compare-baseline latest \
            --fail-on-regression
        env:
          GRAPHQL_ENDPOINT: ${{ secrets.STAGING_GRAPHQL_ENDPOINT }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: agent-test-results-${{ github.run_id }}
          path: |
            results/*.json
            results/*.html
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const resultsPath = path.join(process.cwd(), 'results', `ci-run-${{ github.run_id }}.json`);
              
              if (!fs.existsSync(resultsPath)) {
                console.log('Results file not found, test run may have failed early');
                return;
              }
              
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              let body = `## 🤖 Agent System Test Results\n\n`;
              body += `**Summary**: ${results.summary.passed}/${results.summary.total} passed (${results.summary.successRate.toFixed(1)}%)\n\n`;
              body += `- ✅ Passed: ${results.summary.passed}\n`;
              body += `- ❌ Failed: ${results.summary.failed}\n`;
              body += `- ⏭️ Skipped: ${results.summary.skipped}\n`;
              body += `- ⏱️ Duration: ${(results.summary.totalDuration / 1000).toFixed(2)}s\n\n`;
              
              // Regression information
              if (results.regressions) {
                if (results.regressions.hasRegressions) {
                  body += `### ⚠️ **REGRESSIONS DETECTED**\n\n`;
                  body += `- 🔴 Critical: ${results.regressions.summary.critical}\n`;
                  body += `- 🟠 High: ${results.regressions.summary.high}\n`;
                  body += `- 🟡 Medium: ${results.regressions.summary.medium}\n`;
                  body += `- 🔵 Low: ${results.regressions.summary.low}\n\n`;
                  
                  // Add details for critical and high regressions
                  const critical = results.regressions.details.filter(r => r.severity === 'critical');
                  const high = results.regressions.details.filter(r => r.severity === 'high');
                  
                  if (critical.length > 0) {
                    body += `#### 🔴 Critical Regressions\n`;
                    critical.forEach(r => {
                      body += `- **${r.scenarioId}**: ${r.message}\n`;
                    });
                    body += `\n`;
                  }
                  
                  if (high.length > 0) {
                    body += `#### 🟠 High Priority Regressions\n`;
                    high.forEach(r => {
                      body += `- **${r.scenarioId}**: ${r.message}\n`;
                    });
                    body += `\n`;
                  }
                } else {
                  body += `### ✅ No regressions detected\n\n`;
                }
              }
              
              body += `\n[View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Error posting comment:', error);
            }

      - name: Update baseline (main branch only)
        if: github.ref == 'refs/heads/main' && success()
        run: |
          cd agent-tester
          node dist/index.js run --all \
            --endpoint "${{ secrets.STAGING_GRAPHQL_ENDPOINT }}" \
            --parallel 5 \
            --save-baseline "main-${{ github.sha }}"
          
          # Commit baseline if there are changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add baselines/
          
          if git diff --staged --quiet; then
            echo "No baseline changes to commit"
          else
            git commit -m "Update test baseline from ${{ github.sha }}"
            git push
          fi
        env:
          GRAPHQL_ENDPOINT: ${{ secrets.STAGING_GRAPHQL_ENDPOINT }}

      - name: Fail if tests failed
        if: steps.agent-tests.outcome == 'failure'
        run: |
          echo "Agent tests failed or regressions detected"
          exit 1

