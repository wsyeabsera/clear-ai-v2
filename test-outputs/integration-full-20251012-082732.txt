ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: üîê prevent committing .env to code: https://dotenvx.com/precommit

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: ‚öôÔ∏è  specify custom .env file path with { path: '/custom/path/.env' }

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.error
    ‚úì Registered 30 comprehensive waste management tools:

      94 |   server.registerTool(new DatabaseResetTool(apiBaseUrl));
      95 |
    > 96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
         |           ^
      97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
      98 |   console.error("  - 4 Analytics tools");
      99 |   console.error("  - 5 Relationship tools");

      at registerAllTools (src/tools/index.ts:96:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 20 CRUD operations (list/get/create/update/delete for 4 resources)

       95 |
       96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
    >  97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
          |           ^
       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");

      at registerAllTools (src/tools/index.ts:97:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 4 Analytics tools

       96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
    >  98 |   console.error("  - 4 Analytics tools");
          |           ^
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");
      101 | }

      at registerAllTools (src/tools/index.ts:98:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 5 Relationship tools

       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
       98 |   console.error("  - 4 Analytics tools");
    >  99 |   console.error("  - 5 Relationship tools");
          |           ^
      100 |   console.error("  - 1 Database management tool");
      101 | }
      102 |

      at registerAllTools (src/tools/index.ts:99:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.error
      - 1 Database management tool

       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
    > 100 |   console.error("  - 1 Database management tool");
          |           ^
      101 | }
      102 |
      103 | // Export all tools for testing

      at registerAllTools (src/tools/index.ts:100:11)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:19:21)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: ‚öôÔ∏è  write to custom object with { processEnv: myObject }

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: üîÑ add secrets lifecycle management: https://dotenvx.com/ops

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: ‚öôÔ∏è  suppress all logs with { quiet: true }

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [dotenv@17.2.3] injecting env (0) from .env -- tip: üîê prevent committing .env to code: https://dotenvx.com/precommit

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [ExecutorAgent] Executing step 2: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: ‚öôÔ∏è  load multiple .env files with { path: ['.env.local', '.env'] }

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Parallel execution took: 16 ms

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:79:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 3, has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: ‚öôÔ∏è  specify custom .env file path with { path: '/custom/path/.env' }

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { shipment_ids: [ 'S2', 'S4', 'S7' ] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: üóÇÔ∏è backup and recover secrets: https://dotenvx.com/ops

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [PlannerAgent] Planning for query: Get shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: non-existent-tool

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 0 (non-existent-tool) failed: Tool not found: non-existent-tool

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:121:38)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin', limit: 1 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { facility_id: 'F2', limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 2: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { shipment_ids: [ 'S2', 'S12' ] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    3-level dependency chain results: [
      { success: true, tool: 'facilities_list' },
      { success: true, tool: 'shipments_list' },
      { success: true, tool: 'contaminants_list' }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:157:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'NonExistent' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (shipments_list) failed: Cannot read properties of undefined (reading 'id')

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:174:23)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Error recovery results: [
      { success: true, error: undefined },
      {
        success: false,
        error: "Cannot read properties of undefined (reading 'id')"
      }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:181:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 100 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Timeout handling: { success: true, duration: 5 }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:203:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 1, has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Nested data template test: { success: true, dataLength: 1 }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:223:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 3 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { ids: [ 'F1', 'F2', 'F1' ] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Array mapping test: { step0Success: true, step1Success: true }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:246:15)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 2: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: üîê prevent building .env in docker: https://dotenvx.com/prebuild

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Parallel execution: { duration: 11, success: true }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:271:15)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 2 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 2: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { facility_id: 'F1' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Mixed execution: [
      { success: true, tool: 'facilities_list' },
      { success: true, tool: 'shipments_list' },
      { success: true, tool: 'contaminants_list' }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:292:15)

  console.log
    [ExecutorAgent] Executing plan with 4 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 2: invalid-tool

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 2 (invalid-tool) failed: Tool not found: invalid-tool

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:309:38)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 3: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 4 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Partial failure handling: [
      { success: true },
      { success: true },
      { success: false },
      { success: true }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:319:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 2 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { limit: 2 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.error
    ‚úì Registered 30 comprehensive waste management tools:

      94 |   server.registerTool(new DatabaseResetTool(apiBaseUrl));
      95 |
    > 96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
         |           ^
      97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
      98 |   console.error("  - 4 Analytics tools");
      99 |   console.error("  - 5 Relationship tools");

      at registerAllTools (src/tools/index.ts:96:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Metadata tracking: [
      { tool: 'shipments_list', execTime: 3 },
      { tool: 'facilities_list', execTime: 2 }
    ]

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:342:15)

  console.error
      - 20 CRUD operations (list/get/create/update/delete for 4 resources)

       95 |
       96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
    >  97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
          |           ^
       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");

      at registerAllTools (src/tools/index.ts:97:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 3 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
      - 4 Analytics tools

       96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
    >  98 |   console.error("  - 4 Analytics tools");
          |           ^
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");
      101 | }

      at registerAllTools (src/tools/index.ts:98:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 3 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.error
      - 5 Relationship tools

       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
       98 |   console.error("  - 4 Analytics tools");
    >  99 |   console.error("  - 5 Relationship tools");
          |           ^
      100 |   console.error("  - 1 Database management tool");
      101 | }
      102 |

      at registerAllTools (src/tools/index.ts:99:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.error
      - 1 Database management tool

       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
    > 100 |   console.error("  - 1 Database management tool");
          |           ^
      101 | }
      102 |
      103 | // Export all tools for testing

      at registerAllTools (src/tools/index.ts:100:11)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:65:21)

  console.log
    [ExecutorAgent] Executing step 2: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { limit: 3 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    Performance comparison: {
      parallelDuration: 10,
      note: 'Parallel should be faster than sequential'
    }

      at Object.<anonymous> (src/tests/integration/agents/executor.integration.test.ts:360:15)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Processing query: Get me last week's shipments that got contaminants

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

PASS src/tests/integration/agents/executor.integration.test.ts
  ExecutorAgent Integration
    Simple Execution with Real API
      ‚úì should execute shipments query (87 ms)
      ‚úì should execute facilities query (20 ms)
    Parallel Execution with Real API
      ‚úì should execute independent queries in parallel (18 ms)
    Sequential Execution with Dependencies
      ‚úì should execute dependent steps in order (27 ms)
    Error Handling
      ‚úì should handle tool not found (5 ms)
    Complex Dependency Chains
      ‚úì should execute 3-level dependency chain with real API (25 ms)
      ‚úì should handle error recovery in dependency chain (9 ms)
      ‚úì should handle timeout for slow API responses (6 ms)
      ‚úì should resolve template with nested data ${step[0].data[0].facility.id} (5 ms)
      ‚úì should resolve template with array mapping ${step[0].data.*.id} (7 ms)
      ‚úì should verify parallel execution is faster than sequential (12 ms)
      ‚úì should handle mixed parallel and sequential execution (10 ms)
      ‚úì should handle partial failures in dependency chain (12 ms)
      ‚úì should track metadata across all steps (6 ms)
      ‚úì should measure performance difference: parallel vs sequential (10 ms)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get me last week's shipments that got contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/conversation/dialog.integration.test.ts
  Conversational Dialog Integration
    Scenario: Ambiguous Query ‚Üí Clarification ‚Üí Response
      ‚úì should handle clarification flow (1 ms)
    Scenario: Uncertain Result ‚Üí Express Confidence
      ‚úì should express uncertainty for low confidence results
      ‚úì should express confidence for high-quality results
    Scenario: Multi-Step Task with Progress
      ‚úì should track and report progress through workflow
    Scenario: Follow-Up Questions
      ‚úì should detect and handle follow-ups
    Scenario: Yes/No Confirmation
      ‚úì should handle confirmation flow
      ‚úì should handle negative confirmation

PASS src/tests/integration/workflow/execution.integration.test.ts
  Workflow Execution Integration
    End-to-End Workflow
      ‚úì should execute a multi-step workflow (1 ms)
      ‚úì should handle conditional branching
    Workflow with Checkpointing
      ‚úì should create checkpoints during execution
      ‚úì should resume from checkpoint (1 ms)

FAIL src/tests/integration/memory/pinecone.integration.test.ts
  ‚óè Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ‚Ä¢ If you need a custom transformation, specify a "transform" option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/yab/Projects/clear-ai-v2/src/tests/integration/memory/pinecone.integration.test.ts:32
    const ollamaAvailable = await isOllamaAvailable();
                            ^^^^^

    SyntaxError: await is only valid in async functions and the top level bodies of modules

      at Runtime.createScriptFromCode (../../.yarn/berry/cache/jest-runtime-npm-30.2.0-d80efc730d-10c0.zip/node_modules/jest-runtime/build/index.js:1318:40)

FAIL src/tests/integration/memory/neo4j.integration.test.ts
  ‚óè Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ‚Ä¢ If you need a custom transformation, specify a "transform" option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/yab/Projects/clear-ai-v2/src/tests/integration/memory/neo4j.integration.test.ts:30
    const neo4jAvailable = await isNeo4jAvailable();
                           ^^^^^

    SyntaxError: await is only valid in async functions and the top level bodies of modules

      at Runtime.createScriptFromCode (../../.yarn/berry/cache/jest-runtime-npm-30.2.0-d80efc730d-10c0.zip/node_modules/jest-runtime/build/index.js:1318:40)

  console.log
    [dotenv@17.2.3] injecting env (39) from .env -- tip: ‚öôÔ∏è  write to custom object with { processEnv: myObject }

      at _log (../../.yarn/berry/cache/dotenv-npm-17.2.3-2f9ab93ea1-10c0.zip/node_modules/dotenv/lib/main.js:142:11)

FAIL src/tests/integration/memory/manager.integration.test.ts
  ‚óè Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ‚Ä¢ If you need a custom transformation, specify a "transform" option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/yab/Projects/clear-ai-v2/src/tests/integration/memory/manager.integration.test.ts:47
    const neo4jAvailable = await isNeo4jAvailable();
                           ^^^^^

    SyntaxError: await is only valid in async functions and the top level bodies of modules

      at Runtime.createScriptFromCode (../../.yarn/berry/cache/jest-runtime-npm-30.2.0-d80efc730d-10c0.zip/node_modules/jest-runtime/build/index.js:1318:40)

  console.error
    ‚úì Registered 30 comprehensive waste management tools:

      94 |   server.registerTool(new DatabaseResetTool(apiBaseUrl));
      95 |
    > 96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
         |           ^
      97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
      98 |   console.error("  - 4 Analytics tools");
      99 |   console.error("  - 5 Relationship tools");

      at registerAllTools (src/tools/index.ts:96:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 20 CRUD operations (list/get/create/update/delete for 4 resources)

       95 |
       96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
    >  97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
          |           ^
       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");

      at registerAllTools (src/tools/index.ts:97:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 4 Analytics tools

       96 |   console.error("‚úì Registered 30 comprehensive waste management tools:");
       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
    >  98 |   console.error("  - 4 Analytics tools");
          |           ^
       99 |   console.error("  - 5 Relationship tools");
      100 |   console.error("  - 1 Database management tool");
      101 | }

      at registerAllTools (src/tools/index.ts:98:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 5 Relationship tools

       97 |   console.error("  - 20 CRUD operations (list/get/create/update/delete for 4 resources)");
       98 |   console.error("  - 4 Analytics tools");
    >  99 |   console.error("  - 5 Relationship tools");
          |           ^
      100 |   console.error("  - 1 Database management tool");
      101 | }
      102 |

      at registerAllTools (src/tools/index.ts:99:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.error
      - 1 Database management tool

       98 |   console.error("  - 4 Analytics tools");
       99 |   console.error("  - 5 Relationship tools");
    > 100 |   console.error("  - 1 Database management tool");
          |           ^
      101 | }
      102 |
      103 | // Export all tools for testing

      at registerAllTools (src/tools/index.ts:100:11)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:63:21)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Processing query: Get shipments from last week

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [LLMProvider] openai failed: 401 Incorrect API key provided: invalid-***********fail. You can find your API key at https://platform.openai.com/account/api-keys.

      43 |         return await adapter.generate(request);
      44 |       } catch (error: any) {
    > 45 |         console.error(`[LLMProvider] ${adapter.name} failed:`, error.message);
         |                 ^
      46 |         errors.push(error);
      47 |       }
      48 |     }

      at LLMProvider.generate (src/shared/llm/provider.ts:45:17)
      at Object.<anonymous> (src/tests/integration/llm/provider.integration.test.ts:93:22)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üìù Generated summary: Analysis found a total of 5 contaminated shipments, indicating a high contamination rate of 50% among the shipments analyzed with a confidence level of 90%. No anomalies were identified in the data.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:51:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/llm/groq.integration.test.ts
  Groq Adapter Integration
    ‚úì should be available when API key is set (3 ms)
    ‚úì should generate a response for a simple prompt (285 ms)
    ‚úì should return usage information (154 ms)
    ‚úì should respect temperature configuration (142 ms)
    ‚úì should respect max_tokens configuration (168 ms)
    ‚úì should handle system messages (142 ms)
    ‚úì should have fast inference time (159 ms)
    ‚úì should fail with invalid API key (51 ms)
  Groq Adapter Without API Key
    ‚úì should not be available when API key is missing

  console.log
    [LLMProvider] openai is not available, skipping...

      at LLMProvider.generate (src/shared/llm/provider.ts:38:19)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show me facilities in Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üìù Summary with anomalies: Three facilities were found to be operating above 90% capacity with a confidence level of 95%. Critical contamination was detected in two shipments. It is crucial to address the contamination issue immediately to prevent further impact on operations and quality control. Review the capacity of the facilities to ensure efficient operations and consider implementing measures to prevent future contamination incidents.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:92:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: "Get me last week's shipments that got contaminants",
        timestamp: '2022-02-21T12:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {
      date_from: '2022-02-14',
      date_to: '2022-02-20',
      has_contaminants: true
    }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:89:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [LLMProvider] openai failed: 401 Incorrect API key provided: invalid-*ey-1. You can find your API key at https://platform.openai.com/account/api-keys.

      43 |         return await adapter.generate(request);
      44 |       } catch (error: any) {
    > 45 |         console.error(`[LLMProvider] ${adapter.name} failed:`, error.message);
         |                 ^
      46 |         errors.push(error);
      47 |       }
      48 |     }

      at LLMProvider.generate (src/shared/llm/provider.ts:45:17)
      at Object.<anonymous> (src/tests/integration/llm/provider.integration.test.ts:161:5)

  console.log
    [LLMProvider] Using groq provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [LLMProvider] groq failed: 401 Invalid API Key

      43 |         return await adapter.generate(request);
      44 |       } catch (error: any) {
    > 45 |         console.error(`[LLMProvider] ${adapter.name} failed:`, error.message);
         |                 ^
      46 |         errors.push(error);
      47 |       }
      48 |     }

      at LLMProvider.generate (src/shared/llm/provider.ts:45:17)
      at Object.<anonymous> (src/tests/integration/llm/provider.integration.test.ts:161:5)

  console.log
    [LLMProvider] openai is not available, skipping...

      at LLMProvider.generate (src/shared/llm/provider.ts:38:19)

  console.log
    [LLMProvider] groq is not available, skipping...

      at LLMProvider.generate (src/shared/llm/provider.ts:38:19)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Large dataset analysis: { insights: 2, entities: 50, anomalies: 1 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:134:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    Same values analysis: { anomalies: 0 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:163:15)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Different values analysis: { insights: 1, anomalies: 0 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:186:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/llm/openai.integration.test.ts
  OpenAI Adapter Integration
    ‚úì should be available when API key is set (2 ms)
    ‚úì should generate a response for a simple prompt (408 ms)
    ‚úì should return usage information (642 ms)
    ‚úì should respect temperature configuration (345 ms)
    ‚úì should respect max_tokens configuration (421 ms)
    ‚úì should handle system messages (353 ms)
    ‚úì should fail with invalid API key (188 ms)
  OpenAI Adapter Without API Key
    ‚úì should not be available when API key is missing

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get today's contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments from last week',
        timestamp: '2022-02-21T08:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { date_from: '2022-02-14', date_to: '2022-02-20' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

PASS src/tests/integration/context/compression.integration.test.ts
  Context Compression Integration
    Real LLM Summarization
      ‚úì should compress conversation using SUMMARIZE strategy (779 ms)
      ‚úì should preserve system messages (676 ms)
    Auto Compression Strategy
      ‚úì should automatically select best strategy (1024 ms)

PASS src/tests/integration/llm/provider.integration.test.ts
  LLM Provider Integration
    ‚úì should use the first available provider (406 ms)
    ‚úì should fallback to next provider when first fails (943 ms)
    ‚úì should skip unavailable providers (290 ms)
    ‚úì should throw error when all providers fail (303 ms)
    ‚úì should throw error when all providers unavailable (2 ms)
    ‚úì should work with multiple valid providers (641 ms)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üìÑ Plain text format: The analysis identified 3 shipments in total. The data indicates a low contamination rate with a con

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:141:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 2dc3f852-b95d-436f-8a27-f5b305813d15 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][2dc3f852-b95d-436f-8a27-f5b305813d15] Complete in 3173ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìã Response: There were no shipments with contaminants found in last week's data. The analysis of the tool execution did not return any relevant data. No anomalies or entities were detected.

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:109:15)

  console.log
    üîß Tools used: [ 'shipments_list', 'contaminants_list' ]

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:110:15)

  console.log
    ‚è±Ô∏è  Duration: 3173 ms

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:111:15)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Processing query: Analyse today's contaminants in Hannover

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'location:Hannover' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Analyse today's contaminants in Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request a07e2f0b-e4d8-479d-8f65-57bb245f54c4 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][a07e2f0b-e4d8-479d-8f65-57bb245f54c4] Complete in 4026ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìã Complete Response:

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:95:15)

  console.log
    Message: No data was returned by the shipments_list tool for last week. This result is reported with a confidence level of 90%. No anomalies were detected in the analysis.
    
    Recommendation:
    1. Verify the input parameters used for the shipments_list tool to ensure the correct date range is specified for last week.
    2. Double-check the data sources or connections to address the lack of data returned.
    3. Consider rerunning the tool with adjusted parameters or troubleshooting any potential issues with the tool's execution.

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:96:15)

  console.log
    Tools: [ 'shipments_list' ]

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:97:15)

  console.log
    Duration: 4026 ms

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:98:15)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Processing query: Get contaminated shipments and their contaminant details

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments and their contaminant details

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üìä Large dataset summary length: 578

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:171:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    Anomaly detection: { anomalies: 1 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:210:15)

  console.log
    [AnalyzerAgent] Analyzing 3 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Entity extraction: { shipment: true, facility: true, contaminant: true }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:247:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Confidence scoring: [ 0.9, 0.85 ]

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:276:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Empty dataset analysis: Analyzed 1 tool executions. Found 0 insights. Extracted 0 entities. Detected 0 anomalies

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:294:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    Failed results analysis: No successful results to analyze

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:319:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    Mixed results analysis: { successful: 1, failed: 1 }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:345:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments from last week and their contaminant details

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: "Analyse today's contaminants in Hannover",
        timestamp: '2023-10-23T12:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Hannover' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids[0] at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:115:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üìù Markdown format detected: true

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:199:15)

  console.log
    Sample: - Facility A has a 30% higher throughput compared to other facilities with a confidence level of 90%.
    - There is a trend of increasing contamination r

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:200:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get contaminated shipments and their contaminant details',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:102:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üëî Professional tone: Critical contamination has been detected with high-risk contaminants showing an increasing trend wit

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:225:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Analyse today's contaminants in Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    LLM insights: {
      count: 2,
      summary: 'Analyzed 1 tool executions. Found 2 insights. Extracted 3 entities. Detected 0 anomalies'
    }

      at Object.<anonymous> (src/tests/integration/agents/analyzer.integration.test.ts:371:15)

PASS src/tests/integration/agents/analyzer.integration.test.ts (7.549 s)
  AnalyzerAgent Integration
    Real Data Analysis
      ‚úì should analyze shipment results with contamination (9 ms)
      ‚úì should analyze contaminant data with anomalies (3 ms)
    LLM-Based Analysis
      ‚úì should generate insights with real LLM (2534 ms)
    Multi-Tool Analysis
      ‚úì should analyze results from multiple tools (3 ms)
    Large Dataset Analysis
      ‚úì should analyze LLM with large dataset (50+ records) (4 ms)
      ‚úì should handle statistical analysis edge case: all same values (3 ms)
      ‚úì should handle statistical analysis edge case: all different values (2 ms)
      ‚úì should detect anomalies with various thresholds (2372 ms)
      ‚úì should extract entities from different data types (4 ms)
      ‚úì should score confidence accurately across different patterns (3 ms)
      ‚úì should handle completely empty dataset (3 ms)
      ‚úì should handle all failed tool results (1 ms)
      ‚úì should handle mixed success/failure results (3 ms)
      ‚úì should generate quality insights with real LLM (2168 ms)

  console.log
    
    üî¨ Technical tone: Statistical analysis of the shipment data revealed that the mean contamination rate is 35% with a st

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:248:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

FAIL src/tests/integration/llm/ollama.integration.test.ts (8.346 s)
  Ollama Adapter Integration
    ‚úì should detect if Ollama is running (3 ms)
    ‚úì should be available when Ollama is running (5 ms)
    ‚úï should generate a response for a simple prompt (5047 ms)
    ‚úì should respect temperature configuration (1279 ms)
    ‚úì should respect max_tokens (num_predict) configuration (517 ms)
    ‚úì should handle system messages (386 ms)
    ‚úì should format multi-turn conversations (653 ms)
  Ollama Adapter Without Server
    ‚úì should not be available when Ollama is not running (1 ms)

  ‚óè Ollama Adapter Integration ‚Ä∫ should generate a response for a simple prompt

    socket hang up

      32 |     const prompt = this.formatMessages(request.messages);
      33 |     
    > 34 |     const response = await axios.post(`${this.baseUrl}/api/generate`, {
         |                      ^
      35 |       model: this.config.model || 'mistral:latest',
      36 |       prompt,
      37 |       stream: false,

      at Function.AxiosError.from (../../.yarn/berry/cache/axios-npm-1.12.2-cdb8ea6c90-10c0.zip/node_modules/axios/lib/core/AxiosError.js:96:14)
      at RedirectableRequest.handleRequestError (../../.yarn/berry/cache/axios-npm-1.12.2-cdb8ea6c90-10c0.zip/node_modules/axios/lib/adapters/http.js:638:25)
      at ClientRequest.eventHandlers.<computed> (.yarn/__virtual__/follow-redirects-virtual-1c36f0670e/3/.yarn/berry/cache/follow-redirects-npm-1.15.11-ae7b2db266-10c0.zip/node_modules/follow-redirects/index.js:49:24)
      at Axios.request (../../.yarn/berry/cache/axios-npm-1.12.2-cdb8ea6c90-10c0.zip/node_modules/axios/lib/core/Axios.js:45:41)
      at OllamaAdapter.generate (src/shared/llm/adapters/ollama.ts:34:22)
      at Object.<anonymous> (src/tests/integration/llm/ollama.integration.test.ts:68:22)

    Cause:
    socket hang up


  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    
    üòä Casual tone: Things are looking good overall with shipments based on the analysis, with an 80% confidence level.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:271:15)

  console.log
    [PlannerAgent] Planning for query: From the inspections accepted this week, did we detect any risky contaminants?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request d52621b1-8321-4a84-8ae3-b39e2b5c3b82 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][d52621b1-8321-4a84-8ae3-b39e2b5c3b82] Complete in 4454ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìã Response: Today's contaminants in Hannover were analyzed. One tool execution was conducted, revealing two key insights. The Hannover Sorting Center is operating below its full capacity, handling 320 tons of waste out of a maximum capacity of 500 tons. Additionally, the center accepts various waste types like plastic, metal, paper, and glass, but it does not handle hazardous or medical waste. No anomalies were detected in the analysis.
    
    Recommendation: Based on the findings, it is suggested to monitor the waste intake at the Hannover Sorting Center to optimize its operational efficiency. Additionally, ensuring proper disposal methods for hazardous and medical waste is crucial to maintain a safe and sustainable waste management process.

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:129:15)

  console.log
    üîß Tools used: [ 'facilities_list', 'contaminants_list' ]

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:130:15)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Processing query: From the inspections accepted this week, did we detect any risky contaminants?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: From the inspections accepted this week, did we detect any risky contaminants?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 862949dc-d328-4eea-a6eb-29dc939513e2 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][862949dc-d328-4eea-a6eb-29dc939513e2] Complete in 3464ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üí° Insights: 2

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:113:17)

  console.log
    üè∑Ô∏è  Entities: 4

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:114:17)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Processing query: test query

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: test query

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üìã Data-only response: The query executed successfully but no insights or anomalies were found in the data. Two entities were identified. Further analysis or refinement of the query may be necessary to extract meaningful insights.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:294:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:123:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'From the inspections accepted this week, did we detect any risky contaminants?',
        timestamp: '2023-04-03T10:15:30Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: {
      date_from: '2023-03-27',
      date_to: '${date.today}',
      status: 'accepted',
      has_risk_contaminants: true
    }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:123:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    üìö Many insights summary length: 995

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:320:15)

  console.log
    Insights summarized: 12

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:321:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'test query',
        timestamp: '2023-10-30T15:45:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { date_from: '2023-10-23', date_to: '2023-10-30' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    ü§ñ LLM-enhanced summary: The analysis identified an unusual pattern that requires contextual understanding and domain expertise for accurate interpretation. There was unexpect

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:354:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 502ce6cb-2944-4536-b2e6-9362305b6f93 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][502ce6cb-2944-4536-b2e6-9362305b6f93] Complete in 3322ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìã Response: No risky contaminants were detected from the inspections accepted this week. The analysis of 1 tool execution revealed that no data was returned by the inspections_list tool with a confidence of 90%. No anomalies or entities were detected. Further investigation or reevaluation of the inspection process may be necessary to ensure comprehensive detection of contaminants in future inspections.

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:146:17)

  console.log
    üîß Tools used: [ 'inspections_list' ]

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:147:17)

  console.log
    üí° Insights: 1

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:148:17)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Processing query: Show me contaminated shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me contaminated shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show inspections from this week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    
    ‚àÖ Empty analysis message: No data was found in the analysis. No insights or anomalies were identified. No entities were found in the query.

      at Object.<anonymous> (src/tests/integration/agents/summarizer.integration.test.ts:372:15)

PASS src/tests/integration/agents/summarizer.integration.test.ts (12.404 s)
  SummarizerAgent Integration
    Real LLM Summarization
      ‚úì should generate summary with real LLM (674 ms)
      ‚úì should handle complex analysis with anomalies (831 ms)
    Response Quality
      ‚úì should produce readable responses (682 ms)
    Output Formats
      ‚úì should produce plain text output with small dataset (597 ms)
      ‚úì should produce plain text output with large dataset (1737 ms)
      ‚úì should produce markdown output format with tables and lists (826 ms)
    Tone Control
      ‚úì should use professional tone with formal language (676 ms)
      ‚úì should use technical tone with detailed metrics (1024 ms)
      ‚úì should use casual tone with simplified language (619 ms)
    Edge Cases
      ‚úì should handle summarization with no insights (data-only response) (760 ms)
      ‚úì should handle summarization with many insights (10+ insights) (1480 ms)
      ‚úì should handle LLM fallback when needed (1003 ms)
      ‚úì should handle empty analysis gracefully (713 ms)

  console.log
    [OrchestratorAgent] Stored request 9c456ea4-6ff7-419f-b07b-ea64752e52d2 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][9c456ea4-6ff7-419f-b07b-ea64752e52d2] Complete in 4515ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [PlannerAgent] Planning for query: Get today's contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Processing query: show me the same

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Loaded context: {
      semantic: [
        {
          text: 'Previous query about shipments',
          score: 0.9,
          metadata: {}
        }
      ],
      episodic: undefined,
      entities: []
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: show me the same

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me contaminated shipments',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:157:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'show me the same',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { limit: 10 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 560fa352-dc43-4f97-b69c-7d669f7b0887 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][560fa352-dc43-4f97-b69c-7d669f7b0887] Complete in 5406ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìä Analysis Summary: Analyzed 1 tool executions. Found 2 insights. Extracted 4 entities. Detected 0 anomalies

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:170:15)

  console.log
    üí° Insights found: 2

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:171:15)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    üè∑Ô∏è  Entities extracted: 4

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:172:15)

  console.log
    ‚ö†Ô∏è  Anomalies detected: 0

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:173:15)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Processing query: Get facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [PlannerAgent] Planning for query: Show me the same data

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: show me shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: contaminated shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request f56437c7-78aa-4518-8317-20d6fdb7589c in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][f56437c7-78aa-4518-8317-20d6fdb7589c] Complete in 8186ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][a086a807-8753-4198-867f-d9d5f9b753ad] Processing query: xyz invalid 123

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][a086a807-8753-4198-867f-d9d5f9b753ad] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][a086a807-8753-4198-867f-d9d5f9b753ad] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: xyz invalid 123

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get all facilities and their shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments and their details

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.error
    [OrchestratorAgent][a086a807-8753-4198-867f-d9d5f9b753ad] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:147:24)

  console.log
    [OrchestratorAgent][e1b49fdd-dff9-4a7a-8f56-849547064c5d] Processing query: show me their shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][e1b49fdd-dff9-4a7a-8f56-849547064c5d] Loaded context: {
      semantic: [
        {
          text: 'Previous query: Get facilities in Berlin',
          score: 0.95,
          metadata: [Object]
        },
        {
          text: 'Facility F1 has capacity issues',
          score: 0.85,
          metadata: [Object]
        }
      ],
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][e1b49fdd-dff9-4a7a-8f56-849547064c5d] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: show me their shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][8e09c6d5-8b2e-43a9-96f5-9d60afcc1ee4] Complete in 6760ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Processing query: Get contaminated shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][e1b49fdd-dff9-4a7a-8f56-849547064c5d] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'show me their shipments',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][e1b49fdd-dff9-4a7a-8f56-849547064c5d] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.error
    [OrchestratorAgent][e1b49fdd-dff9-4a7a-8f56-849547064c5d] Error: Error: Circular dependency detected in plan
        at ExecutorAgent.detectCircularDependencies (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:124:17)
        at ExecutorAgent.buildExecutionGraph (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:95:10)
        at ExecutorAgent.execute (/Users/yab/Projects/clear-ai-v2/src/agents/executor.ts:41:24)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:62:43)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:174:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:174:24)

  console.log
    
    üß† Follow-up query with context: {
      message: 'I encountered an error processing your request: Circular dependency detected in plan',
      contextLoaded: 1
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:179:15)

  console.log
    [OrchestratorAgent][3dfa8f4f-0c0c-412a-81dc-f7eff6ecaeb5] Processing query: Get data from nonexistent source XYZ

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][3dfa8f4f-0c0c-412a-81dc-f7eff6ecaeb5] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][3dfa8f4f-0c0c-412a-81dc-f7eff6ecaeb5] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get data from nonexistent source XYZ

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show me all shipments from Berlin and Munich facilities from the last month

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get contaminated shipments',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:189:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.error
    [PlannerAgent] Attempt 1/3 failed: Unexpected token '$', ..."ity_id": [${step[0]."... is not valid JSON

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at Object.<anonymous> (src/tests/integration/agents/planner.integration.test.ts:296:20)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.error
    [OrchestratorAgent][3dfa8f4f-0c0c-412a-81dc-f7eff6ecaeb5] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:187:24)

  console.log
    
    ‚ö†Ô∏è  Error propagated correctly: I encountered an error processing your request: Failed to generate valid plan after 3 attempts: [

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:195:17)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Processing query: Get shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.error
    [OrchestratorAgent] Failed to load context: Error: Memory unavailable
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:202:52)
        at Promise.finally.completed (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:1557:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:1497:10)
        at _callCircusTest (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:1007:40)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at _runTest (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:947:3)
        at /Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:849:7
        at _runTestsForDescribeBlock (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:862:11)
        at _runTestsForDescribeBlock (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:857:11)
        at _runTestsForDescribeBlock (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:857:11)
        at run (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:761:3)
        at runAndTransformResultsToJestFormat (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/jestAdapterInit.js:1918:21)
        at jestAdapter (/Users/yab/.yarn/berry/cache/jest-circus-npm-30.2.0-95f1898763-10c0.zip/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/yab/.yarn/berry/cache/jest-runner-npm-30.2.0-ad3a4cac8e-10c0.zip/node_modules/jest-runner/build/testWorker.js:275:16)
        at runTest (/Users/yab/.yarn/berry/cache/jest-runner-npm-30.2.0-ad3a4cac8e-10c0.zip/node_modules/jest-runner/build/testWorker.js:343:7)
        at Object.worker (/Users/yab/.yarn/berry/cache/jest-runner-npm-30.2.0-ad3a4cac8e-10c0.zip/node_modules/jest-runner/build/testWorker.js:497:12)

      156 |       };
      157 |     } catch (error) {
    > 158 |       console.error('[OrchestratorAgent] Failed to load context:', error);
          |               ^
      159 |       return {};
      160 |     }
      161 |   }

      at OrchestratorAgent.loadContext (src/agents/orchestrator.ts:158:15)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:51:19)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:204:24)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Loaded context: {}

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 47c9c345-4620-4bae-9483-c84be0629802 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][47c9c345-4620-4bae-9483-c84be0629802] Complete in 5132ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Processing query: Get shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Which carriers have the highest contamination rates?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments',
        timestamp: '2022-01-15T10:00:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Show me recent shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get shipments from October 1st to October 10th going to Hannover

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request b337117e-0b34-4279-894c-974f304e3243 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][b337117e-0b34-4279-894c-974f304e3243] Complete in 5163ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üíæ Query without memory succeeded: true

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:210:15)

  console.log
    [OrchestratorAgent][593ea575-67a4-4a3f-935e-5c972109487b] Processing query: Query 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][593ea575-67a4-4a3f-935e-5c972109487b] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][593ea575-67a4-4a3f-935e-5c972109487b] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Query 1

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    Extracted plan: {
      "steps": [
        {
          "tool": "facilities_list",
          "params": {
            "location": "Hannover"
          },
          "depends_on": [],
          "parallel": false
        },
        {
          "tool": "shipments_list",
          "params": {
            "date_from": "2022-10-01",
            "date_to": "2022-10-10",
            "facility_id": "${step[0].data.ids}"
          },
          "depends_on": [
            0
          ],
          "parallel": false
        }
      ],
      "metadata": {
        "query": "Get shipments from October 1st to October 10th going to Hannover",
        "timestamp": "2022-10-20T15:30:00Z",
        "estimated_duration_ms": 2000
      }
    }

      at Object.<anonymous> (src/tests/integration/agents/planner.integration.test.ts:361:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.error
    [OrchestratorAgent][593ea575-67a4-4a3f-935e-5c972109487b] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:216:25)

  console.log
    [OrchestratorAgent][1b477e4c-c13b-4aa6-9875-0e9e22e8bbe7] Processing query: Query 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][1b477e4c-c13b-4aa6-9875-0e9e22e8bbe7] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][1b477e4c-c13b-4aa6-9875-0e9e22e8bbe7] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Query 2

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get facilities in Berlin, then get their shipments, then check for contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.error
    [OrchestratorAgent][1b477e4c-c13b-4aa6-9875-0e9e22e8bbe7] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:217:25)

  console.log
    [OrchestratorAgent][7e47bef2-ab67-4dcf-a771-54b9d05cbbc3] Processing query: Query 3

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][7e47bef2-ab67-4dcf-a771-54b9d05cbbc3] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][7e47bef2-ab67-4dcf-a771-54b9d05cbbc3] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Query 3

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:218:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 4721164e-f1cf-4b33-887a-cb8fc95fe0b3 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][4721164e-f1cf-4b33-887a-cb8fc95fe0b3] Complete in 9231ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Processing query: Get facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:218:25)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [PlannerAgent] Planning for query: Which facilities are near capacity?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:218:25)

  console.error
    [OrchestratorAgent][7e47bef2-ab67-4dcf-a771-54b9d05cbbc3] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/orchestrator.integration.test.ts:218:25)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:218:25)

  console.log
    
    üÜî Request IDs generated: {
      req1: '593ea575-67a4-4a3f-935e-5c972109487b',
      req2: '1b477e4c-c13b-4aa6-9875-0e9e22e8bbe7',
      req3: '7e47bef2-ab67-4dcf-a771-54b9d05cbbc3'
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:232:15)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Processing query: Analyze shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Analyze shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

PASS src/tests/integration/agents/planner.integration.test.ts (40.507 s)
  PlannerAgent Integration
    Simple Queries
      ‚úì should generate plan for shipment query with real LLM (1332 ms)
      ‚úì should generate plan for facility query (978 ms)
      ‚úì should generate plan for contaminant query (2321 ms)
    Complex Queries with Dependencies
      ‚úì should generate multi-step plan for nested query (1682 ms)
      ‚úì should generate plan for location-based nested query (1362 ms)
      ‚úì should handle inspection-based queries (2184 ms)
    Temporal References
      ‚úì should correctly parse "last week" reference (1287 ms)
      ‚úì should correctly parse "this week" reference (1138 ms)
      ‚úì should correctly parse "today" reference (1639 ms)
    Plan Metadata
      ‚úì should include query in metadata (1153 ms)
      ‚úì should include timestamp in metadata (1409 ms)
    Context Handling
      ‚úì should incorporate context into planning (2553 ms)
    Error Handling
      ‚úì should handle simple queries without complexity (831 ms)
      ‚úì should handle queries with filters (1449 ms)
    Plan Validation
      ‚úì should produce executable plans with valid tool names (1697 ms)
      ‚úì should produce plans with valid dependencies (1537 ms)
    Complex Multi-Facility Queries
      ‚úì should handle queries across multiple facilities with temporal context (4116 ms)
      ‚úì should generate plan requiring data aggregation across multiple tools (1075 ms)
      ‚úì should handle ambiguous queries with reasonable assumptions (1685 ms)
      ‚úì should extract parameters from natural language (dates, locations, IDs) (2766 ms)
      ‚úì should check tool availability before planning (1639 ms)
      ‚úì should create dependency chain for sequential queries (1853 ms)
      ‚úì should generate metadata with timestamps and estimated duration (1027 ms)
      ‚úì should handle capacity-related facility queries (1009 ms)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Analyze shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request a0c4a521-3578-44dd-9776-9ed0b2b45a44 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][a0c4a521-3578-44dd-9776-9ed0b2b45a44] Complete in 6823ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][f660c7b9-7e11-4dd9-aeec-b11938cebba0] Processing query: invalid tool request xyz

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][f660c7b9-7e11-4dd9-aeec-b11938cebba0] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][f660c7b9-7e11-4dd9-aeec-b11938cebba0] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: invalid tool request xyz

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 1/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 2/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.error
    [PlannerAgent] Attempt 3/3 failed: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]

      101 |       } catch (error: any) {
      102 |         attempts++;
    > 103 |         console.error(`[PlannerAgent] Attempt ${attempts}/${this.config.maxRetries} failed:`, error.message);
          |                 ^
      104 |
      105 |         if (attempts >= this.config.maxRetries) {
      106 |           throw new Error(`Failed to generate valid plan after ${attempts} attempts: ${error.message}`);

      at PlannerAgent.plan (src/agents/planner.ts:103:17)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:57:20)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.error
    [OrchestratorAgent][f660c7b9-7e11-4dd9-aeec-b11938cebba0] Error: Error: Failed to generate valid plan after 3 attempts: [
      {
        "origin": "array",
        "code": "too_small",
        "minimum": 1,
        "inclusive": true,
        "path": [
          "steps"
        ],
        "message": "Too small: expected array to have >=1 items"
      }
    ]
        at PlannerAgent.plan (/Users/yab/Projects/clear-ai-v2/src/agents/planner.ts:106:17)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at OrchestratorAgent.handleQuery (/Users/yab/Projects/clear-ai-v2/src/agents/orchestrator.ts:57:20)
        at Object.<anonymous> (/Users/yab/Projects/clear-ai-v2/src/tests/integration/agents/system.integration.test.ts:209:24)

      101 |
      102 |     } catch (error: any) {
    > 103 |       console.error(`[OrchestratorAgent][${requestId}] Error:`, error);
          |               ^
      104 |
      105 |       // Store error in memory for learning
      106 |       if (this.config.enableMemory) {

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:103:15)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:209:24)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Processing query: Show me all shipments from last week with contaminants

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me all shipments from last week with contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 17786ca6-4489-44b5-9374-da17a537a34b in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][17786ca6-4489-44b5-9374-da17a537a34b] Complete in 8711ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìä Metrics collected: { duration: 8711, toolsUsed: 1, timestamp: '2025-10-12T06:28:22.830Z' }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:251:15)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Processing query: Get shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Processing query: Get facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Processing query: Get inspections

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)
          at async Promise.all (index 0)

  console.log
    [PlannerAgent] Planning for query: Get shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)
          at async Promise.all (index 1)

  console.log
    [PlannerAgent] Planning for query: Get facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)
          at async Promise.all (index 2)

  console.log
    [PlannerAgent] Planning for query: Get inspections

      at PlannerAgent.plan (src/agents/planner.ts:60:13)
          at async Promise.all (index 2)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 0)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 1)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 2)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me all shipments from last week with contaminants',
        timestamp: '2022-02-21T08:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {
      date_from: '2022-02-14',
      date_to: '2022-02-20',
      has_contaminants: true
    }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id).join(',') at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:220:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)
          at async Promise.all (index 0)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)
          at async Promise.all (index 0)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)
          at async Promise.all (index 0)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get inspections',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Executing step 0: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)
          at async Promise.all (index 2)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)
          at async Promise.all (index 2)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)
          at async Promise.all (index 2)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)
          at async Promise.all (index 1)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)
          at async Promise.all (index 1)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)
          at async Promise.all (index 1)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 5792800c-fc97-4b5e-869f-8d49f62e6b30 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][5792800c-fc97-4b5e-869f-8d49f62e6b30] Complete in 3756ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üì¶ Blueprint 1 - Contaminated shipments: {
      message: "There were no shipments from last week with contaminants found in the analysis. The tool 'shipments_list' executed successfully but returned an empty ",
      tools: [ 'shipments_list', 'contaminants_list' ]
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:228:15)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Processing query: Which facilities received the most rejected shipments?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Which facilities received the most rejected shipments?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)
          at async Promise.all (index 0)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)
          at async Promise.all (index 0)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)
          at async Promise.all (index 1)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)
          at async Promise.all (index 1)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 1)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Which facilities received the most rejected shipments?',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { status: 'rejected', limit: 1 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (facilities_list) failed: Path not found: .facility_id at facility_id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:235:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request db67033f-9073-4823-b103-9247acbb1349 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][db67033f-9073-4823-b103-9247acbb1349] Complete in 4883ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)
          at async Promise.all (index 1)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request e441c0b8-bb58-4de1-b67a-d6041b0c960e in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent][e441c0b8-bb58-4de1-b67a-d6041b0c960e] Complete in 6393ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)
          at async Promise.all (index 0)

  console.log
    [OrchestratorAgent] Stored request a95d1690-b751-49b1-838a-77c4fa1a5b39 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][a95d1690-b751-49b1-838a-77c4fa1a5b39] Complete in 4443ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üè≠ Blueprint 2 - Rejected shipments by facility: {
      message: 'The analysis identified a pattern of rejected shipments with contaminants being detected, as well as a correlation between heavy metal contamination a',
      insights: 2
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:248:15)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Processing query: What are the most common contaminants detected this month?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: What are the most common contaminants detected this month?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)
          at async Promise.all (index 2)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)
          at async Promise.all (index 2)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent] Stored request 7d0d5a57-d6b5-4a63-ab28-4abf18a0327c in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)
          at async Promise.all (index 2)

  console.log
    [OrchestratorAgent][7d0d5a57-d6b5-4a63-ab28-4abf18a0327c] Complete in 9977ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)
          at async Promise.all (index 2)

  console.log
    
    ‚ö° Concurrent execution: {
      totalTime: 9979,
      query1: 6393,
      query2: 4883,
      query3: 9977,
      allSucceeded: true
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:279:15)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Processing query: Get contaminated shipments from last week

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'temporal:week', 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get contaminated shipments from last week

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'What are the most common contaminants detected this month?',
        timestamp: '2023-03-15T13:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { type: 'detection' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Step 0 did not produce valid data

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:255:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 32459891-7ad0-4d96-88d9-41cc12222e0e in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][32459891-7ad0-4d96-88d9-41cc12222e0e] Complete in 3273ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üß™ Blueprint 3 - Common contaminants: {
      message: 'There were no successful results to analyze this month for common contaminants detected.',
      entities: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:265:15)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Processing query: Show me high-risk contaminants detected in Berlin facilities

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'location:Berlin' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me high-risk contaminants detected in Berlin facilities

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get contaminated shipments from last week',
        timestamp: '2022-01-31T13:45:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {
      date_from: '2022-01-24',
      date_to: '2022-01-30',
      has_contaminants: true
    }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id).join(',') at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:292:24)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Plan generated: {
      steps: [
        { tool: 'facilities_list', params: [Object] },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me high-risk contaminants detected in Berlin facilities',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:272:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 14f59084-74a6-4974-8971-f079354caafd in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][14f59084-74a6-4974-8971-f079354caafd] Complete in 4567ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    ‚öôÔ∏è  Planner config test: { toolsUsed: [ 'shipments_list', 'contaminants_list' ], success: true }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:300:15)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Processing query: Analyze facility capacity

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:facility' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Analyze facility capacity

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request f4f32628-cc5c-4a96-87ed-59b5be95e8fe in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][f4f32628-cc5c-4a96-87ed-59b5be95e8fe] Complete in 4915ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Plan generated: {
      steps: [ { tool: 'facilities_list', params: {}, parallel: false } ],
      metadata: {
        query: 'Analyze facility capacity',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    
    ‚ö†Ô∏è  Blueprint 4 - High-risk contaminants in Berlin: {
      message: 'High-risk contaminants detected in Berlin facilities:\n' +
        '- The Berlin Processing Plant is currently processing 750 tons out of its 1000-ton capacity.\n' +
        '- T',
      anomalies: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:279:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Processing query: What is the acceptance rate for each facility?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:facility' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [PlannerAgent] Planning for query: What is the acceptance rate for each facility?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Plan generated: {
      steps: [ { tool: 'facilities_list', params: {}, parallel: false } ],
      metadata: {
        query: 'What is the acceptance rate for each facility?',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 0365dee9-7979-406c-884c-ffa0e1410d57 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][0365dee9-7979-406c-884c-ffa0e1410d57] Complete in 6381ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üîç Analyzer mode test: { hasAnalysis: true, insights: 3 }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:320:15)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Processing query: Show me inspection results

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me inspection results

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me inspection results',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 86267202-3379-4cfe-84d8-9af362038bf3 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][86267202-3379-4cfe-84d8-9af362038bf3] Complete in 8578ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìä Blueprint 5 - Acceptance rates: {
      message: 'The analysis did not provide specific acceptance rates for each facility. Instead, it focused on comparing the current load to capacity across facilit',
      insights: 2
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:299:15)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Processing query: Show me shipments with HCl levels above medium

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me shipments with HCl levels above medium

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Plan generated: {
      steps: [
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me shipments with HCl levels above medium',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { type: 'HCl', risk_level: 'medium' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request f661bcd2-ba52-4e04-9a15-e6b1e7e052e1 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][f661bcd2-ba52-4e04-9a15-e6b1e7e052e1] Complete in 2987ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üî¨ Blueprint 6 - HCl levels: {
      message: 'The analysis did not return any data on shipments with HCl levels above medium. No anomalies were detected. No entities were found during the analysis',
      tools: [ 'contaminants_list' ]
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:313:15)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Processing query: Which carriers have the highest contamination rates?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Which carriers have the highest contamination rates?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 72818cae-c003-4b96-be73-95b649532f0d in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][72818cae-c003-4b96-be73-95b649532f0d] Complete in 6609ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìù Summarizer format test: { messageLength: 723, hasAnalysis: true }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:335:15)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Processing query: Get all shipments from Berlin facilities, analyze contamination patterns, and summarize the findings

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get all shipments from Berlin facilities, analyze contamination patterns, and summarize the findings

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Plan generated: {
      steps: [
        { tool: 'facilities_list', params: [Object], parallel: false },
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get all shipments from Berlin facilities, analyze contamination patterns, and summarize the findings',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 3000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 3 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (shipments_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:344:24)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 2: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 2 (contaminants_list) failed: Step 1 did not produce valid data

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:344:24)

  console.log
    [ExecutorAgent] Plan execution complete. 3 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Execution complete. Results: 3

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 3 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Plan generated: {
      steps: [
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        },
        { tool: 'shipments_list', params: [Object], parallel: false },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Which carriers have the highest contamination rates?',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 4000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 4 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 2 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing step 2: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 2 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id) at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:320:24)

  console.log
    [ExecutorAgent] Executing step 3: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 3 (contaminants_list) failed: Path not found: .map(item => item.id) at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:320:24)

  console.log
    [ExecutorAgent] Plan execution complete. 4 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Execution complete. Results: 4

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 4 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request d4626330-237d-4683-a315-fc4e7227f5d2 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][d4626330-237d-4683-a315-fc4e7227f5d2] Complete in 5013ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üöö Blueprint 7 - Carrier contamination rates: {
      message: 'The carriers with the highest contamination rates based on the analysis are not explicitly mentioned in the findings. However, the analysis indicates ',
      insights: 2
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:331:15)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Processing query: Show me inspection failures by waste type

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:inspection' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me inspection failures by waste type

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request d5692eb0-f1f8-4bad-a447-7196470f4354 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][d5692eb0-f1f8-4bad-a447-7196470f4354] Complete in 5165ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üîÑ Multi-agent pipeline: {
      tools: [ 'facilities_list', 'shipments_list', 'contaminants_list' ],
      insights: 2,
      messageLength: 695
    }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:356:15)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Processing query: Get 5 recent shipments with contaminants

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get 5 recent shipments with contaminants

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Plan generated: {
      steps: [
        {
          tool: 'inspections_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me inspection failures by waste type',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: inspections_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for inspections_list: { status: 'failed', has_risk_contaminants: true }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 4b0c5e45-4ff5-43ac-a076-343133f9f4c7 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][4b0c5e45-4ff5-43ac-a076-343133f9f4c7] Complete in 1741ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üîç Blueprint 8 - Inspection failures: {
      message: 'There were no inspection failures by waste type found in the analysis. Further investigation or data collection may be needed to provide the requested',
      entities: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:349:15)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Processing query: What facilities are near capacity?

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: What facilities are near capacity?

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get 5 recent shipments with contaminants',
        timestamp: '2022-01-15T15:30:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: { has_contaminants: true, limit: 5 }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (contaminants_list) failed: Path not found: .map(item => item.id).join(',') at id

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:364:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'What facilities are near capacity?',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { min_capacity: '90%', ids: [] }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 10652c32-b900-4341-beba-9f7d17a9b534 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][10652c32-b900-4341-beba-9f7d17a9b534] Complete in 4505ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    ‚úì Data consistency check: { toolsUsed: 2, entities: 4, hasMessage: true }

      at Object.<anonymous> (src/tests/integration/agents/orchestrator.integration.test.ts:377:15)

PASS src/tests/integration/agents/orchestrator.integration.test.ts (85.626 s)
  OrchestratorAgent Integration
    Complete Pipeline Execution
      ‚úì should execute full query flow (4031 ms)
      ‚úì should handle complex nested queries (3465 ms)
    Memory Integration
      ‚úì should store query in memory (4517 ms)
      ‚úì should load context from memory (8188 ms)
    Error Recovery
      ‚úì should handle errors gracefully (2607 ms)
    Advanced Memory Integration
      ‚úì should load memory context for follow-up queries (1085 ms)
      ‚úì should propagate errors through full pipeline (2426 ms)
      ‚úì should work with different memory configurations (5164 ms)
    Request Tracking
      ‚úì should generate unique request IDs (7196 ms)
      ‚úì should collect execution metrics (8714 ms)
    Concurrent Query Handling
      ‚úì should handle 3 queries in parallel (9983 ms)
    Configuration Variations
      ‚úì should work with different planner configurations (4569 ms)
      ‚úì should work with different analyzer modes (6382 ms)
      ‚úì should work with different summarizer formats (6610 ms)
    Complex Scenarios
      ‚úì should handle queries requiring multiple agents in sequence (5166 ms)
      ‚úì should maintain data consistency through pipeline (4507 ms)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request c3b6646f-6d63-44f4-9eff-1edfddeece40 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][c3b6646f-6d63-44f4-9eff-1edfddeece40] Complete in 6654ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìà Blueprint 9 - Near capacity facilities: {
      message: 'The analysis indicates that the current load tons at the Berlin Processing Plant are significantly higher compared to other facilities, suggesting tha',
      anomalies: 0
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:367:15)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Processing query: Show me contaminant trends over the past 30 days

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Loaded context: { semantic: undefined, episodic: undefined, entities: [] }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me contaminant trends over the past 30 days

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Plan generated: {
      steps: [
        {
          tool: 'contaminants_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me contaminant trends over the past 30 days',
        timestamp: '2022-03-02T13:45:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: contaminants_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for contaminants_list: { date_from: '2022-02-01', date_to: '2022-03-02' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 5f1801e9-d71a-4f06-8628-4bdcf7863814 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][5f1801e9-d71a-4f06-8628-4bdcf7863814] Complete in 3358ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üìâ Blueprint 10 - Contaminant trends: {
      message: 'There is no data available on contaminant trends over the past 30 days as the contaminants_list tool did not return any data in the analysis conducted',
      insights: 1
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:385:15)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Processing query: Get shipments from NonExistentFacility123

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get shipments from NonExistentFacility123

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        },
        {
          tool: 'shipments_list',
          params: [Object],
          depends_on: [Array],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get shipments from NonExistentFacility123',
        timestamp: '2022-01-01T12:00:00Z',
        estimated_duration_ms: 2000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 2 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'NonExistentFacility123' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 1: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.error
    [ExecutorAgent] Step 1 (shipments_list) failed: Path not found: .ids at ids

      202 |
      203 |     } catch (error: any) {
    > 204 |       console.error(`[ExecutorAgent] Step ${index} (${step.tool}) failed:`, error.message);
          |               ^
      205 |
      206 |       return {
      207 |         success: false,

      at ExecutorAgent.executeStep (src/agents/executor.ts:204:15)
      at src/agents/executor.ts:166:19
          at Array.map (<anonymous>)
      at ExecutorAgent.executeBatch (src/agents/executor.ts:161:34)
      at ExecutorAgent.execute (src/agents/executor.ts:55:39)
      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:62:23)
      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:394:24)

  console.log
    [ExecutorAgent] Plan execution complete. 2 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Execution complete. Results: 2

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 2 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request 5b045ff5-30b7-492c-87f6-7d1959537cfa in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][5b045ff5-30b7-492c-87f6-7d1959537cfa] Complete in 4527ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    ‚ùå Error recovery - Non-existent facility: {
      message: 'The analysis indicates that the tool execution to retrieve shipments from NonExistentFacility123 was',
      error: undefined
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:403:15)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Processing query: Get facilities in Berlin

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'location:Berlin' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Get facilities in Berlin

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Plan generated: {
      steps: [
        {
          tool: 'facilities_list',
          params: [Object],
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Get facilities in Berlin',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1500
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: facilities_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for facilities_list: { location: 'Berlin' }

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request dc3d06cc-75b9-450d-ba1d-573c59738a6f in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][dc3d06cc-75b9-450d-ba1d-573c59738a6f] Complete in 3785ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Processing query: Show me their shipments

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:45:13)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Loaded context: {
      semantic: undefined,
      episodic: undefined,
      entities: [ 'entity:shipment' ]
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:52:17)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Planning...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:56:15)

  console.log
    [PlannerAgent] Planning for query: Show me their shipments

      at PlannerAgent.plan (src/agents/planner.ts:60:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [PlannerAgent] Plan generated successfully

      at PlannerAgent.plan (src/agents/planner.ts:98:17)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Plan generated: {
      steps: [
        {
          tool: 'shipments_list',
          params: {},
          depends_on: [],
          parallel: false
        }
      ],
      metadata: {
        query: 'Show me their shipments',
        timestamp: '2022-01-15T13:30:00Z',
        estimated_duration_ms: 1000
      }
    }

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:58:15)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Executing plan...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:61:15)

  console.log
    [ExecutorAgent] Executing plan with 1 steps

      at ExecutorAgent.execute (src/agents/executor.ts:35:13)

  console.log
    [ExecutorAgent] Executing 1 steps in parallel

      at ExecutorAgent.execute (src/agents/executor.ts:52:15)

  console.log
    [ExecutorAgent] Executing step 0: shipments_list

      at ExecutorAgent.executeStep (src/agents/executor.ts:177:13)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Resolved params for shipments_list: {}

      at ExecutorAgent.executeStep (src/agents/executor.ts:193:15)
          at Array.map (<anonymous>)

  console.log
    [ExecutorAgent] Plan execution complete. 1 results

      at ExecutorAgent.execute (src/agents/executor.ts:79:13)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Execution complete. Results: 1

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:63:15)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Analyzing results...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:66:15)

  console.log
    [AnalyzerAgent] Analyzing 1 tool results

      at AnalyzerAgent.analyze (src/agents/analyzer.ts:33:13)

  console.log
    [AnalyzerAgent] Generating insights...

      at AnalyzerAgent.generateInsights (src/agents/analyzer.ts:85:13)

  console.log
    [AnalyzerAgent] Extracting entities...

      at AnalyzerAgent.extractEntities (src/agents/analyzer.ts:311:13)

  console.log
    [AnalyzerAgent] Detecting anomalies...

      at AnalyzerAgent.detectAnomalies (src/agents/analyzer.ts:373:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Analysis complete

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:68:15)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Generating summary...

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:71:15)

  console.log
    [SummarizerAgent] Generating summary...

      at SummarizerAgent.summarize (src/agents/summarizer.ts:39:13)

  console.log
    [LLMProvider] Using openai provider

      at LLMProvider.generate (src/shared/llm/provider.ts:42:17)

  console.log
    [OrchestratorAgent] Stored request f8a315ae-3d3d-499e-8a17-6f079d5a1aa9 in memory

      at OrchestratorAgent.storeInMemory (src/agents/orchestrator.ts:188:15)

  console.log
    [OrchestratorAgent][f8a315ae-3d3d-499e-8a17-6f079d5a1aa9] Complete in 5816ms

      at OrchestratorAgent.handleQuery (src/agents/orchestrator.ts:98:15)

  console.log
    
    üí¨ Memory-based follow-up: {
      query1: 'The analysis identified facilities in Berlin, specifically the Berlin Processing Plant, which has a ',
      query2: 'The analysis of the shipments data revealed four key insights:\n' +
        '1. There is a trend of increasing wei',
      bothSucceeded: true
    }

      at Object.<anonymous> (src/tests/integration/agents/system.integration.test.ts:422:15)

PASS src/tests/integration/agents/system.integration.test.ts (106.445 s)
  System Integration - Complete Agent Pipeline
    End-to-End Query Scenarios
      ‚úì should handle: "Get me last week's shipments that got contaminants" (3180 ms)
      ‚úì should handle: "Analyse today's contaminants in Hannover" (4455 ms)
      ‚úì should handle: "From inspections accepted this week, did we detect any risky contaminants?" (3325 ms)
    Agent Pipeline Verification
      ‚úì should execute complete pipeline: Plan ‚Üí Execute ‚Üí Analyze ‚Üí Summarize (5407 ms)
      ‚úì should track execution time and request ID (6761 ms)
    Memory Integration
      ‚úì should store query results in memory (5133 ms)
      ‚úì should handle multiple queries in sequence (16056 ms)
    Error Handling
      ‚úì should handle queries that might fail gracefully (2346 ms)
    Blueprint Example Queries
      ‚úì Blueprint 1: Show me all shipments from last week with contaminants (3756 ms)
      ‚úì Blueprint 2: Which facilities received the most rejected shipments? (4445 ms)
      ‚úì Blueprint 3: What are the most common contaminants detected this month? (3275 ms)
      ‚úì Blueprint 4: Show me high-risk contaminants detected in Berlin facilities (4917 ms)
      ‚úì Blueprint 5: What is the acceptance rate for each facility? (8580 ms)
      ‚úì Blueprint 6: Show me shipments with HCl levels above medium (2989 ms)
      ‚úì Blueprint 7: Which carriers have the highest contamination rates? (5014 ms)
      ‚úì Blueprint 8: Show me inspection failures by waste type (1744 ms)
      ‚úì Blueprint 9: What facilities are near capacity? (6655 ms)
      ‚úì Blueprint 10: Show me contaminant trends over the past 30 days (3358 ms)
    Error Recovery Scenarios
      ‚úì should handle non-existent facility queries (4529 ms)
      ‚úì should handle follow-up questions based on previous query context (9604 ms)

A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.
Test Suites: 4 failed, 12 passed, 16 total
Tests:       1 failed, 146 passed, 147 total
Snapshots:   0 total
Time:        107.7 s
Ran all test suites matching integration.
